!function(e){function t(t){for(var n,s,a=t[0],l=t[1],c=t[2],p=0,d=[];p<a.length;p++)s=a[p],r[s]&&d.push(r[s][0]),r[s]=0;for(n in l)Object.prototype.hasOwnProperty.call(l,n)&&(e[n]=l[n]);for(u&&u(t);d.length;)d.shift()();return i.push.apply(i,c||[]),o()}function o(){for(var e,t=0;t<i.length;t++){for(var o=i[t],n=!0,a=1;a<o.length;a++){var l=o[a];0!==r[l]&&(n=!1)}n&&(i.splice(t--,1),e=s(s.s=o[0]))}return e}var n={},r={main:0},i=[];function s(t){if(n[t])return n[t].exports;var o=n[t]={i:t,l:!1,exports:{}};return e[t].call(o.exports,o,o.exports,s),o.l=!0,o.exports}s.m=e,s.c=n,s.d=function(e,t,o){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(s.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)s.d(o,n,function(t){return e[t]}.bind(null,n));return o},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="";var a=window.webpackJsonp=window.webpackJsonp||[],l=a.push.bind(a);a.push=t,a=a.slice();for(var c=0;c<a.length;c++)t(a[c]);var u=l;i.push([0,"vendor"]),o()}({"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/index.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/lib/loader.js!./resources/scss/admin.scss":
/*!********************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader!./node_modules/postcss-loader/src??embedded!./node_modules/sass-loader/lib/loader.js!./resources/scss/admin.scss ***!
  \********************************************************************************************************************************************************************************************************/
/*! no static exports found */function(e,t,o){},"./resources/js/admin.ts":
/*!*******************************!*\
  !*** ./resources/js/admin.ts ***!
  \*******************************/
/*! no exports provided */function(e,t,o){"use strict";o.r(t);var n=o(/*! ./components/ProviderSelect */"./resources/js/components/ProviderSelect.ts"),r=o(/*! ./components/MapBoxMap */"./resources/js/components/MapBoxMap.ts"),i=o(/*! ./components/GoogleMap */"./resources/js/components/GoogleMap.ts");new(function(){return function(){console.log("hello world");var e=document.querySelector("[data-provider-select]");e&&(this.providerSelect=new n.default(e));var t=document.querySelectorAll("[data-map-provider]");t&&t.length&&t.forEach(function(e){console.log(e.dataset.mapProvider),"mapbox"===e.dataset.mapProvider?new r.default(e):"google"===e.dataset.mapProvider&&new i.default(e)})}}()),console.log(document.querySelector("[data-map-provider]"))},"./resources/js/components/AbstractMap.ts":
/*!************************************************!*\
  !*** ./resources/js/components/AbstractMap.ts ***!
  \************************************************/
/*! exports provided: default */function(e,t,o){"use strict";o.r(t);var n=function(){return function(e){this.container=e,this.apiKey=e.dataset.mapApiKey,this.prefix=e.dataset.fieldPrefix;var t=e.parentElement;this.latInput=t.querySelector('input[name*="lat"]'),this.lngInput=t.querySelector('input[name*="lng"]'),this.geocoderStringInput=t.querySelector('input[name*="geocoderString"]')}}();t.default=n},"./resources/js/components/GoogleMap.ts":
/*!**********************************************!*\
  !*** ./resources/js/components/GoogleMap.ts ***!
  \**********************************************/
/*! exports provided: default */function(e,t,o){"use strict";o.r(t);var n,r=o(/*! ./AbstractMap */"./resources/js/components/AbstractMap.ts"),i=(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)t.hasOwnProperty(o)&&(e[o]=t[o])})(e,t)},function(e,t){function o(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(o.prototype=t.prototype,new o)}),s=function(e){function t(t){var o=e.call(this,t)||this;return o.getPlaceById=o.getPlaceById.bind(o),o.loadGoogleApi=o.loadGoogleApi.bind(o),o.initGeocoder=o.initGeocoder.bind(o),o.autoCompleteListener=o.autoCompleteListener.bind(o),o.placeChangedHandler=o.placeChangedHandler.bind(o),o.fieldMap=o.fieldMap.bind(o),o.map=null,o.autocomplete=null,o.geocoder=null,o.card=null,o.mapCenter=null,o.marker=null,o.places=null,o.fillEntry=!0,o.center=o.geocoderStringInput.value||"2000 W Morehead St, Charlotte, NC",setTimeout(function(){o.loadGoogleApi().then(o.initGeocoder)},200),document.getElementById("tabs")&&[].slice.call(document.getElementById("tabs").getElementsByTagName("a")).map(function(e){e.addEventListener("click",function(){var e=o.map.getZoom(),t=o.map.getCenter();setTimeout(function(){google.maps.event.trigger(this.map,"resize"),this.map.setZoom(e),this.map.setCenter(t)},1)})}),console.log("GoogleMap",o),o}return i(t,e),t.prototype.fieldMap=function(){return[{api:function(e){return e.geometry.location.lat()},input:'[name="'+this.latInput.name+'"]'},{api:function(e){return e.geometry.location.lng()},input:'[name="'+this.lngInput.name+'"]'}]},t.prototype.initGeocoder=function(){var e=this;console.log("initGeocoder"),this.geocoder=new google.maps.Geocoder,this.geocoder.geocode({address:this.center},function(o,n){console.log(o,n),"OK"==n?(e.mapCenter=o[0].geometry.location,e.initMap(),e.autoCompleteListener(),e.placeId&&(e.places=new google.maps.places.PlacesService(e.map),e.getPlaceById(e.placeId))):t.fail("Couldn't geocode "+e.center)})},t.prototype.getPlaceById=function(e){var t=this;this.places.getDetails({placeId:e},function(e,o){"OK"==o&&(t.setMarker(e),t.geocoderStringInput.value=e.name)})},t.prototype.completeEntry=function(e){for(var t in this.fieldMap()){var o=this.fieldMap()[t];if(console.log(o),"function"==typeof o.api){var n=o.api(e);if(o.input)(r=document.querySelector(o.input))&&(r.value=n)}else{var r;(r=document.querySelector(o.input))&&(r.value=e[o.api])}}},t.prototype.setMarker=function(e){this.marker.setVisible(!1),e.geometry?(e.geometry.viewport?this.map.fitBounds(e.geometry.viewport):(this.map.setCenter(e.geometry.location),this.map.setZoom(17)),this.marker.setPosition(e.geometry.location),this.marker.setVisible(!0)):t.fail("No details available for input: '"+e.name+"'")},t.prototype.autoCompleteListener=function(){this.autocomplete.addListener("place_changed",this.placeChangedHandler)},t.prototype.placeChangedHandler=function(){var e=this.autocomplete.getPlace();if(console.log(e),this.setMarker(e),this.fillEntry)this.completeEntry(e);else{this.container.id.split("-")[1];var t=document.querySelector('input[id="'+this.container.id+'"]');t&&(t.value=e.place_id)}},t.prototype.initMap=function(){var e={zoom:16,center:this.mapCenter},t=document.querySelector('[data-map-provider="google"]');console.log(t),this.map=new google.maps.Map(t,e),this.marker=new google.maps.Marker({map:this.map,position:this.mapCenter}),this.card=document.querySelector(".googlemapfield-card"),this.map.controls[google.maps.ControlPosition.TOP_RIGHT].push(this.card);this.autocomplete=new google.maps.places.Autocomplete(this.geocoderStringInput,{}),this.autocomplete.bindTo("bounds",this.map)},t.prototype.loadGoogleApi=function(){var e=this;return new Promise(function(t,o){if(void 0!==window.google||1==window.simpleMapsLoadingGoogle)return console.log("Deferring"),void t("Loaded");var n=document.createElement("script");n.type="text/javascript",n.setAttribute("async","true"),n.setAttribute("defer","true"),n.src="https://maps.googleapis.com/maps/api/js?libraries=places&key="+e.apiKey,n.onload=function(){t("loaded")},document.body.appendChild(n)})},t.fail=function(e){window.Craft&&(window.Craft.cp.displayError("<strong>GoogleMapField:</strong> "+e),window.console&&console.error.apply(console,["%GoogleMapField: %c"+e,"font-weight:bold;","font-weight:normal;"]))},t}(r.default);t.default=s},"./resources/js/components/MapBoxMap.ts":
/*!**********************************************!*\
  !*** ./resources/js/components/MapBoxMap.ts ***!
  \**********************************************/
/*! exports provided: default */function(e,t,o){"use strict";o.r(t);var n,r=o(/*! mapbox-gl */"./node_modules/mapbox-gl/dist/mapbox-gl.js"),i=o.n(r),s=o(/*! @mapbox/mapbox-gl-geocoder */"./node_modules/@mapbox/mapbox-gl-geocoder/lib/index.js"),a=o.n(s),l=o(/*! ./AbstractMap */"./resources/js/components/AbstractMap.ts"),c=(o(/*! mapbox-gl/src/css/mapbox-gl.css */"./node_modules/mapbox-gl/src/css/mapbox-gl.css"),o(/*! @mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css */"./node_modules/@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css"),n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)t.hasOwnProperty(o)&&(e[o]=t[o])})(e,t)},function(e,t){function o(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(o.prototype=t.prototype,new o)}),u=function(e,t){var o="function"==typeof Symbol&&e[Symbol.iterator];if(!o)return e;var n,r,i=o.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)s.push(n.value)}catch(e){r={error:e}}finally{try{n&&!n.done&&(o=i.return)&&o.call(i)}finally{if(r)throw r.error}}return s},p=function(e){function t(t){var o=e.call(this,t)||this;return o.initMap=o.initMap.bind(o),o.initGeocoder=o.initGeocoder.bind(o),o.initMap(),console.log(o),o}return c(t,e),t.prototype.initMap=function(){var e=this,t=0,o=0;this.latInput&&(t=parseFloat(this.latInput.value)),this.lngInput&&(o=parseFloat(this.lngInput.value)),i.a.accessToken=this.apiKey,this.map=new r.Map({container:this.container,style:"mapbox://styles/mapbox/streets-v11",center:[o,t],zoom:13}),this.map.on("click",function(t){var o=t.lngLat,n=o.lng,r=o.lat;e.latInput&&e.lngInput&&(e.latInput.value=r.toString(),e.lngInput.value=n.toString())}),this.initGeocoder()},t.prototype.initGeocoder=function(){var e=this,t=new a.a({accessToken:this.apiKey,marker:{color:"orange"},mapboxgl:i.a,origin:"https://api.mapbox.com"});t.on("result",function(t){console.log(t),e.geocoderStringInput.value=t.result.place_name;var o=u(t.result.geometry.coordinates,2),n=o[0],r=o[1];e.latInput.value=r,e.lngInput.value=n}),this.container.parentNode.querySelector(".geocoder").appendChild(t.onAdd(this.map)),console.log(this.geocoderStringInput.value),t.query(this.geocoderStringInput.value)},t}(l.default);t.default=p},"./resources/js/components/ProviderSelect.ts":
/*!***************************************************!*\
  !*** ./resources/js/components/ProviderSelect.ts ***!
  \***************************************************/
/*! exports provided: default */function(e,t,o){"use strict";o.r(t);var n=o(/*! ../models/Provider */"./resources/js/models/Provider.ts"),r=function(){function e(t){if(this.section=t,this.select=document.querySelector("#settings-providerSelect"),this.select){var o=this.section.dataset.providers;this.providers=e.parseProviders(o),this.handleProviderChange=this.handleProviderChange.bind(this),this.setActive=this.setActive.bind(this),this.select.addEventListener("change",this.handleProviderChange),this.setActive(this.select.value)}}return e.parseProviders=function(e){var t=JSON.parse(e);return Object.values(t).map(function(e){return new n.default(e)})},e.prototype.handleProviderChange=function(e){var t=e.target;this.setActive(t.value)},e.prototype.setActive=function(e){var t=this.providers.find(function(t){return t.handle===e});if(!t)return!1;var o=this.section.querySelector('[data-provider="'+t.handle+'"]');return!!o&&(this.section.querySelectorAll("[data-provider]").forEach(function(e){return e.classList.remove("active")}),o.classList.add("active"),!0)},e}();t.default=r},"./resources/js/models/Provider.ts":
/*!*****************************************!*\
  !*** ./resources/js/models/Provider.ts ***!
  \*****************************************/
/*! exports provided: default */function(e,t,o){"use strict";o.r(t);var n=function(){return function(e){this.handle=e.handle,this.name=e.name,this.description=e.description}}();t.default=n},"./resources/scss/admin.scss":
/*!***********************************!*\
  !*** ./resources/scss/admin.scss ***!
  \***********************************/
/*! no static exports found */function(e,t,o){var n=o(/*! !../../node_modules/mini-css-extract-plugin/dist/loader.js!../../node_modules/css-loader!../../node_modules/postcss-loader/src??embedded!../../node_modules/sass-loader/lib/loader.js!./admin.scss */"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/index.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/lib/loader.js!./resources/scss/admin.scss");"string"==typeof n&&(n=[[e.i,n,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};o(/*! ../../node_modules/style-loader/lib/addStyles.js */"./node_modules/style-loader/lib/addStyles.js")(n,r);n.locals&&(e.exports=n.locals)},0:
/*!*****************************************************************!*\
  !*** multi ./resources/js/admin.ts ./resources/scss/admin.scss ***!
  \*****************************************************************/
/*! no static exports found */function(e,t,o){o(/*! /Users/abryrath/Union/Library/geolocation/resources/js/admin.ts */"./resources/js/admin.ts"),e.exports=o(/*! /Users/abryrath/Union/Library/geolocation/resources/scss/admin.scss */"./resources/scss/admin.scss")}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL2FkbWluLnRzIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL0Fic3RyYWN0TWFwLnRzIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL0dvb2dsZU1hcC50cyIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9NYXBCb3hNYXAudHMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvUHJvdmlkZXJTZWxlY3QudHMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL21vZGVscy9Qcm92aWRlci50cyIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvc2Nzcy9hZG1pbi5zY3NzIl0sIm5hbWVzIjpbIndlYnBhY2tKc29ucENhbGxiYWNrIiwiZGF0YSIsIm1vZHVsZUlkIiwiY2h1bmtJZCIsImNodW5rSWRzIiwibW9yZU1vZHVsZXMiLCJleGVjdXRlTW9kdWxlcyIsImkiLCJyZXNvbHZlcyIsImxlbmd0aCIsImluc3RhbGxlZENodW5rcyIsInB1c2giLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJtb2R1bGVzIiwicGFyZW50SnNvbnBGdW5jdGlvbiIsInNoaWZ0IiwiZGVmZXJyZWRNb2R1bGVzIiwiYXBwbHkiLCJjaGVja0RlZmVycmVkTW9kdWxlcyIsInJlc3VsdCIsImRlZmVycmVkTW9kdWxlIiwiZnVsZmlsbGVkIiwiaiIsImRlcElkIiwic3BsaWNlIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsInMiLCJpbnN0YWxsZWRNb2R1bGVzIiwibWFpbiIsImV4cG9ydHMiLCJtb2R1bGUiLCJsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInAiLCJqc29ucEFycmF5Iiwid2luZG93Iiwib2xkSnNvbnBGdW5jdGlvbiIsInNsaWNlIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsIl9jb21wb25lbnRzX1Byb3ZpZGVyU2VsZWN0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfY29tcG9uZW50c19NYXBCb3hNYXBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsIl9jb21wb25lbnRzX0dvb2dsZU1hcF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwiY29uc29sZSIsImxvZyIsInByb3ZpZGVyU2VsZWN0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwidGhpcyIsImlucHV0TWFwcyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JFYWNoIiwiY29udGFpbmVyIiwiZGF0YXNldCIsIm1hcFByb3ZpZGVyIiwiQWJzdHJhY3RNYXAiLCJhcGlLZXkiLCJtYXBBcGlLZXkiLCJwcmVmaXgiLCJmaWVsZFByZWZpeCIsInBhcmVudEVsZW1lbnQiLCJsYXRJbnB1dCIsImxuZ0lucHV0IiwiZ2VvY29kZXJTdHJpbmdJbnB1dCIsIkdvb2dsZU1hcCIsIl9zdXBlciIsIl90aGlzIiwiZ2V0UGxhY2VCeUlkIiwibG9hZEdvb2dsZUFwaSIsImluaXRHZW9jb2RlciIsImF1dG9Db21wbGV0ZUxpc3RlbmVyIiwicGxhY2VDaGFuZ2VkSGFuZGxlciIsImZpZWxkTWFwIiwibWFwIiwiYXV0b2NvbXBsZXRlIiwiZ2VvY29kZXIiLCJjYXJkIiwibWFwQ2VudGVyIiwibWFya2VyIiwicGxhY2VzIiwiZmlsbEVudHJ5IiwiY2VudGVyIiwic2V0VGltZW91dCIsInRoZW4iLCJnZXRFbGVtZW50QnlJZCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZWwiLCJhZGRFdmVudExpc3RlbmVyIiwieCIsImdldFpvb20iLCJnZXRDZW50ZXIiLCJnb29nbGUiLCJtYXBzIiwiZXZlbnQiLCJ0cmlnZ2VyIiwic2V0Wm9vbSIsInNldENlbnRlciIsIl9fZXh0ZW5kcyIsImFwaSIsInBsYWNlIiwiZ2VvbWV0cnkiLCJsb2NhdGlvbiIsImxhdCIsImlucHV0IiwibG5nIiwiR2VvY29kZXIiLCJnZW9jb2RlIiwiYWRkcmVzcyIsInJlc3VsdHMiLCJzdGF0dXMiLCJpbml0TWFwIiwicGxhY2VJZCIsIlBsYWNlc1NlcnZpY2UiLCJmYWlsIiwiZ2V0RGV0YWlscyIsInNldE1hcmtlciIsImNvbXBsZXRlRW50cnkiLCJmaWVsZCIsInNldFZpc2libGUiLCJ2aWV3cG9ydCIsImZpdEJvdW5kcyIsInNldFBvc2l0aW9uIiwiYWRkTGlzdGVuZXIiLCJnZXRQbGFjZSIsImlkIiwic3BsaXQiLCJwbGFjZV9pZCIsIm1hcE9wdGlvbnMiLCJ6b29tIiwiTWFwIiwiTWFya2VyIiwicG9zaXRpb24iLCJjb250cm9scyIsIkNvbnRyb2xQb3NpdGlvbiIsIlRPUF9SSUdIVCIsIkF1dG9jb21wbGV0ZSIsImJpbmRUbyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0Iiwic2ltcGxlTWFwc0xvYWRpbmdHb29nbGUiLCJnbWpzIiwiY3JlYXRlRWxlbWVudCIsInR5cGUiLCJzZXRBdHRyaWJ1dGUiLCJzcmMiLCJvbmxvYWQiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJtZXNzYWdlIiwiQ3JhZnQiLCJjcCIsImRpc3BsYXlFcnJvciIsImVycm9yIiwiX0Fic3RyYWN0TWFwX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJNYXBCb3hNYXAiLCJsYXRWYWx1ZSIsImxuZ1ZhbHVlIiwicGFyc2VGbG9hdCIsIm1hcGJveF9nbF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQiLCJhIiwiYWNjZXNzVG9rZW4iLCJtYXBib3hfZ2xfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsInN0eWxlIiwib24iLCJlIiwiX2EiLCJsbmdMYXQiLCJ0b1N0cmluZyIsIl9tYXBib3hfbWFwYm94X2dsX2dlb2NvZGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCIsImNvbG9yIiwibWFwYm94Z2wiLCJvcmlnaW4iLCJwbGFjZV9uYW1lIiwiX19yZWFkIiwiY29vcmRpbmF0ZXMiLCJwYXJlbnROb2RlIiwib25BZGQiLCJxdWVyeSIsIl9BYnN0cmFjdE1hcF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwiX21vZGVsc19Qcm92aWRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiUHJvdmlkZXJTZWxlY3QiLCJzZWN0aW9uIiwic2VsZWN0IiwicHJvdmlkZXJzSnNvbiIsInByb3ZpZGVycyIsInBhcnNlUHJvdmlkZXJzIiwiaGFuZGxlUHJvdmlkZXJDaGFuZ2UiLCJzZXRBY3RpdmUiLCJqc29uIiwiSlNPTiIsInBhcnNlIiwidmFsdWVzIiwidGFyZ2V0IiwiaGFuZGxlIiwibWF0Y2hpbmdQcm92aWRlciIsImZpbmQiLCJwcm92aWRlciIsIm1hdGNoaW5nU2VjdGlvbiIsImNsYXNzTGlzdCIsInJlbW92ZSIsImFkZCIsIlByb3ZpZGVyIiwib3B0cyIsImRlc2NyaXB0aW9uIiwiY29udGVudCIsIm9wdGlvbnMiLCJobXIiLCJ0cmFuc2Zvcm0iLCJpbnNlcnRJbnRvIiwidW5kZWZpbmVkIiwibG9jYWxzIl0sIm1hcHBpbmdzIjoiYUFDQSxTQUFBQSxFQUFBQyxHQVFBLElBUEEsSUFNQUMsRUFBQUMsRUFOQUMsRUFBQUgsRUFBQSxHQUNBSSxFQUFBSixFQUFBLEdBQ0FLLEVBQUFMLEVBQUEsR0FJQU0sRUFBQSxFQUFBQyxFQUFBLEdBQ1FELEVBQUFILEVBQUFLLE9BQW9CRixJQUM1QkosRUFBQUMsRUFBQUcsR0FDQUcsRUFBQVAsSUFDQUssRUFBQUcsS0FBQUQsRUFBQVAsR0FBQSxJQUVBTyxFQUFBUCxHQUFBLEVBRUEsSUFBQUQsS0FBQUcsRUFDQU8sT0FBQUMsVUFBQUMsZUFBQUMsS0FBQVYsRUFBQUgsS0FDQWMsRUFBQWQsR0FBQUcsRUFBQUgsSUFLQSxJQUZBZSxLQUFBaEIsR0FFQU8sRUFBQUMsUUFDQUQsRUFBQVUsT0FBQVYsR0FPQSxPQUhBVyxFQUFBUixLQUFBUyxNQUFBRCxFQUFBYixHQUFBLElBR0FlLElBRUEsU0FBQUEsSUFFQSxJQURBLElBQUFDLEVBQ0FmLEVBQUEsRUFBaUJBLEVBQUFZLEVBQUFWLE9BQTRCRixJQUFBLENBRzdDLElBRkEsSUFBQWdCLEVBQUFKLEVBQUFaLEdBQ0FpQixHQUFBLEVBQ0FDLEVBQUEsRUFBa0JBLEVBQUFGLEVBQUFkLE9BQTJCZ0IsSUFBQSxDQUM3QyxJQUFBQyxFQUFBSCxFQUFBRSxHQUNBLElBQUFmLEVBQUFnQixLQUFBRixHQUFBLEdBRUFBLElBQ0FMLEVBQUFRLE9BQUFwQixJQUFBLEdBQ0FlLEVBQUFNLElBQUFDLEVBQUFOLEVBQUEsS0FHQSxPQUFBRCxFQUlBLElBQUFRLEVBQUEsR0FLQXBCLEVBQUEsQ0FDQXFCLEtBQUEsR0FHQVosRUFBQSxHQUdBLFNBQUFTLEVBQUExQixHQUdBLEdBQUE0QixFQUFBNUIsR0FDQSxPQUFBNEIsRUFBQTVCLEdBQUE4QixRQUdBLElBQUFDLEVBQUFILEVBQUE1QixHQUFBLENBQ0FLLEVBQUFMLEVBQ0FnQyxHQUFBLEVBQ0FGLFFBQUEsSUFVQSxPQU5BaEIsRUFBQWQsR0FBQWEsS0FBQWtCLEVBQUFELFFBQUFDLElBQUFELFFBQUFKLEdBR0FLLEVBQUFDLEdBQUEsRUFHQUQsRUFBQUQsUUFLQUosRUFBQU8sRUFBQW5CLEVBR0FZLEVBQUFRLEVBQUFOLEVBR0FGLEVBQUFTLEVBQUEsU0FBQUwsRUFBQU0sRUFBQUMsR0FDQVgsRUFBQVksRUFBQVIsRUFBQU0sSUFDQTFCLE9BQUE2QixlQUFBVCxFQUFBTSxFQUFBLENBQTBDSSxZQUFBLEVBQUFDLElBQUFKLEtBSzFDWCxFQUFBZ0IsRUFBQSxTQUFBWixHQUNBLG9CQUFBYSxlQUFBQyxhQUNBbEMsT0FBQTZCLGVBQUFULEVBQUFhLE9BQUFDLFlBQUEsQ0FBd0RDLE1BQUEsV0FFeERuQyxPQUFBNkIsZUFBQVQsRUFBQSxjQUFpRGUsT0FBQSxLQVFqRG5CLEVBQUFvQixFQUFBLFNBQUFELEVBQUFFLEdBRUEsR0FEQSxFQUFBQSxJQUFBRixFQUFBbkIsRUFBQW1CLElBQ0EsRUFBQUUsRUFBQSxPQUFBRixFQUNBLEtBQUFFLEdBQUEsaUJBQUFGLFFBQUFHLFdBQUEsT0FBQUgsRUFDQSxJQUFBSSxFQUFBdkMsT0FBQXdDLE9BQUEsTUFHQSxHQUZBeEIsRUFBQWdCLEVBQUFPLEdBQ0F2QyxPQUFBNkIsZUFBQVUsRUFBQSxXQUF5Q1QsWUFBQSxFQUFBSyxVQUN6QyxFQUFBRSxHQUFBLGlCQUFBRixFQUFBLFFBQUFNLEtBQUFOLEVBQUFuQixFQUFBUyxFQUFBYyxFQUFBRSxFQUFBLFNBQUFBLEdBQWdILE9BQUFOLEVBQUFNLElBQXFCQyxLQUFBLEtBQUFELElBQ3JJLE9BQUFGLEdBSUF2QixFQUFBMkIsRUFBQSxTQUFBdEIsR0FDQSxJQUFBTSxFQUFBTixLQUFBaUIsV0FDQSxXQUEyQixPQUFBakIsRUFBQSxTQUMzQixXQUFpQyxPQUFBQSxHQUVqQyxPQURBTCxFQUFBUyxFQUFBRSxFQUFBLElBQUFBLEdBQ0FBLEdBSUFYLEVBQUFZLEVBQUEsU0FBQWdCLEVBQUFDLEdBQXNELE9BQUE3QyxPQUFBQyxVQUFBQyxlQUFBQyxLQUFBeUMsRUFBQUMsSUFHdEQ3QixFQUFBOEIsRUFBQSxHQUVBLElBQUFDLEVBQUFDLE9BQUEsYUFBQUEsT0FBQSxpQkFDQUMsRUFBQUYsRUFBQWhELEtBQUEyQyxLQUFBSyxHQUNBQSxFQUFBaEQsS0FBQVgsRUFDQTJELElBQUFHLFFBQ0EsUUFBQXZELEVBQUEsRUFBZ0JBLEVBQUFvRCxFQUFBbEQsT0FBdUJGLElBQUFQLEVBQUEyRCxFQUFBcEQsSUFDdkMsSUFBQVUsRUFBQTRDLEVBSUExQyxFQUFBUixLQUFBLGNBRUFVOzs7Ozs7Ozt1REN0SkFPLEVBQUFnQixFQUFBbUIsR0FBQSxJQUFBQyxFQUFBcEMsb0NBQUEsK0NBQUFxQyxFQUFBckMsK0JBQUEsMENBQUFzQyxFQUFBdEMsK0JBQUEsMENBNEJBLElBeEJBLFdBc0JBLE9BbkJJLFdBQ0l1QyxRQUFRQyxJQUFJLGVBQ1osSUFBTUMsRUFBaUNDLFNBQVNDLGNBQWMsMEJBQzFERixJQUNBRyxLQUFLSCxlQUFpQixJQUFJTCxFQUFBLFFBQWVLLElBRzdDLElBQU1JLEVBQXdDSCxTQUFTSSxpQkFBaUIsdUJBQ3BFRCxHQUFhQSxFQUFVaEUsUUFDdkJnRSxFQUFVRSxRQUFRLFNBQUNDLEdBQ2ZULFFBQVFDLElBQUlRLEVBQVVDLFFBQVFDLGFBQ1EsV0FBbENGLEVBQVVDLFFBQVFDLFlBQ2xCLElBQUliLEVBQUEsUUFBVVcsR0FDMkIsV0FBbENBLEVBQVVDLFFBQVFDLGFBQ3pCLElBQUlaLEVBQUEsUUFBVVUsTUFqQmxDLElBMEJBVCxRQUFRQyxJQUFJRSxTQUFTQyxjQUFjOzs7OzZEQzlCbkMzQyxFQUFBZ0IsRUFBQW1CLEdBQUEsSUFBQWdCLEVBQUEsV0FxQkEsT0FiSSxTQUFZSCxHQUNSSixLQUFLSSxVQUFZQSxFQUNqQkosS0FBS1EsT0FBU0osRUFBVUMsUUFBUUksVUFDaENULEtBQUtVLE9BQVNOLEVBQVVDLFFBQVFNLFlBRWhDLElBQU1DLEVBQWdCUixFQUFVUSxjQUNoQ1osS0FBS2EsU0FBV0QsRUFBY2IsY0FBYyxzQkFDNUNDLEtBQUtjLFNBQVdGLEVBQWNiLGNBQWMsc0JBQzVDQyxLQUFLZSxvQkFBc0JILEVBQWNiLGNBQWMsa0NBaEIvRCxHQXVCZVIsRUFBQTs7OztrY0NOZnlCLEVBQUEsU0FBQUMsR0FhSSxTQUFBRCxFQUFZWixHQUFaLElBQUFjLEVBQ0lELEVBQUExRSxLQUFBeUQsS0FBTUksSUFBVUosWUFFaEJrQixFQUFLQyxhQUFlRCxFQUFLQyxhQUFhckMsS0FBS29DLEdBQzNDQSxFQUFLRSxjQUFnQkYsRUFBS0UsY0FBY3RDLEtBQUtvQyxHQUM3Q0EsRUFBS0csYUFBZUgsRUFBS0csYUFBYXZDLEtBQUtvQyxHQUMzQ0EsRUFBS0kscUJBQXVCSixFQUFLSSxxQkFBcUJ4QyxLQUFLb0MsR0FDM0RBLEVBQUtLLG9CQUFzQkwsRUFBS0ssb0JBQW9CekMsS0FBS29DLEdBQ3pEQSxFQUFLTSxTQUFXTixFQUFLTSxTQUFTMUMsS0FBS29DLEdBRW5DQSxFQUFLTyxJQUFNLEtBQ1hQLEVBQUtRLGFBQWUsS0FDcEJSLEVBQUtTLFNBQVcsS0FDaEJULEVBQUtVLEtBQU8sS0FFWlYsRUFBS1csVUFBWSxLQUNqQlgsRUFBS1ksT0FBUyxLQUNkWixFQUFLYSxPQUFTLEtBQ2RiLEVBQUtjLFdBQVksRUFFakJkLEVBQUtlLE9BQVNmLEVBQUtILG9CQUFvQnhDLE9BQVMsb0NBRWhEMkQsV0FBVyxXQUNQaEIsRUFBS0UsZ0JBQ0FlLEtBQUtqQixFQUFLRyxlQUNoQixLQUdDdkIsU0FBU3NDLGVBQWUsU0FDeEIsR0FBRzlDLE1BQU0vQyxLQUNMdUQsU0FBU3NDLGVBQWUsUUFBUUMscUJBQXFCLE1BQ3ZEWixJQUFJLFNBQUNhLEdBQ0hBLEVBQUdDLGlCQUFpQixRQUFTLFdBQ3pCLElBQU1DLEVBQUl0QixFQUFLTyxJQUFJZ0IsVUFDZjdFLEVBQUlzRCxFQUFLTyxJQUFJaUIsWUFFakJSLFdBQVcsV0FDUFMsT0FBT0MsS0FBS0MsTUFBTUMsUUFBUTlDLEtBQUt5QixJQUFLLFVBQ3BDekIsS0FBS3lCLElBQUlzQixRQUFRUCxHQUNqQnhDLEtBQUt5QixJQUFJdUIsVUFBVXBGLElBQ3BCLE9BS2YrQixRQUFRQyxJQUFJLFlBQWFzQixLQW1MakMsT0E3T3dCK0IsRUFBQWpDLEVBQUFDLEdBNkRwQkQsRUFBQTNFLFVBQUFtRixTQUFBLFdBQ0ksTUFBTyxDQUNILENBQ0kwQixJQUFLLFNBQVVDLEdBQ1gsT0FBT0EsRUFBTUMsU0FBU0MsU0FBU0MsT0FFbkNDLE1BQU8sVUFBVXZELEtBQUthLFNBQVMvQyxLQUFJLE1BRXZDLENBQ0lvRixJQUFLLFNBQVVDLEdBQ1gsT0FBT0EsRUFBTUMsU0FBU0MsU0FBU0csT0FFbkNELE1BQU8sVUFBVXZELEtBQUtjLFNBQVNoRCxLQUFJLFFBSy9Da0QsRUFBQTNFLFVBQUFnRixhQUFBLGVBQUFILEVBQUFsQixLQUNJTCxRQUFRQyxJQUFJLGdCQUNaSSxLQUFLMkIsU0FBVyxJQUFJZ0IsT0FBT0MsS0FBS2EsU0FDaEN6RCxLQUFLMkIsU0FBUytCLFFBQVEsQ0FDbEJDLFFBQVMzRCxLQUFLaUMsUUFFZCxTQUFDMkIsRUFBY0MsR0FDWGxFLFFBQVFDLElBQUlnRSxFQUFTQyxHQUNQLE1BQVZBLEdBQ0EzQyxFQUFLVyxVQUFZK0IsRUFBUSxHQUFHUixTQUFTQyxTQUNyQ25DLEVBQUs0QyxVQUNMNUMsRUFBS0ksdUJBRURKLEVBQUs2QyxVQUNMN0MsRUFBS2EsT0FBUyxJQUFJWSxPQUFPQyxLQUFLYixPQUFPaUMsY0FBYzlDLEVBQUtPLEtBQ3hEUCxFQUFLQyxhQUFhRCxFQUFLNkMsV0FHM0IvQyxFQUFVaUQsS0FBSyxvQkFBb0IvQyxFQUFLZSxXQU94RGpCLEVBQUEzRSxVQUFBOEUsYUFBQSxTQUFhNEMsR0FBYixJQUFBN0MsRUFBQWxCLEtBQ0lBLEtBQUsrQixPQUFPbUMsV0FBVyxDQUNuQkgsUUFBU0EsR0FDVixTQUFDWixFQUFZVSxHQUNFLE1BQVZBLElBQ0EzQyxFQUFLaUQsVUFBVWhCLEdBQ2ZqQyxFQUFLSCxvQkFBb0J4QyxNQUFRNEUsRUFBTXJGLFNBS25Ea0QsRUFBQTNFLFVBQUErSCxjQUFBLFNBQWNqQixHQUNWLElBQUssSUFBSXBILEtBQUtpRSxLQUFLd0IsV0FBWSxDQUMzQixJQUFNNkMsRUFBUXJFLEtBQUt3QixXQUFXekYsR0FFOUIsR0FEQTRELFFBQVFDLElBQUl5RSxHQUNhLG1CQUFkQSxFQUFNbkIsSUFBb0IsQ0FDakMsSUFBTXBHLEVBQVN1SCxFQUFNbkIsSUFBSUMsR0FDekIsR0FBSWtCLEVBQU1kLE9BQ0FBLEVBQTBCekQsU0FBU0MsY0FBY3NFLEVBQU1kLFVBRXpEQSxFQUFNaEYsTUFBUXpCLE9BR25CLENBQ0gsSUFBTXlHLEtBQTBCekQsU0FBU0MsY0FBY3NFLEVBQU1kLFVBRXpEQSxFQUFNaEYsTUFBUTRFLEVBQU1rQixFQUFNbkIsU0FNMUNsQyxFQUFBM0UsVUFBQThILFVBQUEsU0FBVWhCLEdBQ05uRCxLQUFLOEIsT0FBT3dDLFlBQVcsR0FFbEJuQixFQUFNQyxVQUtQRCxFQUFNQyxTQUFTbUIsU0FDZnZFLEtBQUt5QixJQUFJK0MsVUFBVXJCLEVBQU1DLFNBQVNtQixXQUVsQ3ZFLEtBQUt5QixJQUFJdUIsVUFBVUcsRUFBTUMsU0FBU0MsVUFDbENyRCxLQUFLeUIsSUFBSXNCLFFBQVEsS0FHckIvQyxLQUFLOEIsT0FBTzJDLFlBQVl0QixFQUFNQyxTQUFTQyxVQUN2Q3JELEtBQUs4QixPQUFPd0MsWUFBVyxJQVpuQnRELEVBQVVpRCxLQUFLLG9DQUFvQ2QsRUFBTXJGLEtBQUksTUFlckVrRCxFQUFBM0UsVUFBQWlGLHFCQUFBLFdBQ0l0QixLQUFLMEIsYUFBYWdELFlBQVksZ0JBQWlCMUUsS0FBS3VCLHNCQUd4RFAsRUFBQTNFLFVBQUFrRixvQkFBQSxXQUNJLElBQUk0QixFQUFRbkQsS0FBSzBCLGFBQWFpRCxXQUs5QixHQUpBaEYsUUFBUUMsSUFBSXVELEdBRVpuRCxLQUFLbUUsVUFBVWhCLEdBRVhuRCxLQUFLZ0MsVUFDTGhDLEtBQUtvRSxjQUFjakIsT0FDaEIsQ0FDS25ELEtBQUtJLFVBQVV3RSxHQUFHQyxNQUFNLEtBQUssR0FBckMsSUFDTXRCLEVBQTBCekQsU0FBU0MsY0FBYyxhQUFhQyxLQUFLSSxVQUFVd0UsR0FBRSxNQUNqRnJCLElBQ0FBLEVBQU1oRixNQUFRNEUsRUFBTTJCLFlBS2hDOUQsRUFBQTNFLFVBQUF5SCxRQUFBLFdBQ0ksSUFBSWlCLEVBQWEsQ0FDYkMsS0FBTSxHQUNOL0MsT0FBUWpDLEtBQUs2QixXQUdYSixFQUFNM0IsU0FBU0MsY0FBYyxnQ0FDbkNKLFFBQVFDLElBQUk2QixHQUNaekIsS0FBS3lCLElBQU0sSUFBSWtCLE9BQU9DLEtBQUtxQyxJQUFJeEQsRUFBS3NELEdBR3BDL0UsS0FBSzhCLE9BQVMsSUFBSWEsT0FBT0MsS0FBS3NDLE9BQU8sQ0FDakN6RCxJQUFLekIsS0FBS3lCLElBQ1YwRCxTQUFVbkYsS0FBSzZCLFlBSW5CN0IsS0FBSzRCLEtBQU85QixTQUFTQyxjQUFjLHdCQUNuQ0MsS0FBS3lCLElBQUkyRCxTQUFTekMsT0FBT0MsS0FBS3lDLGdCQUFnQkMsV0FBV25KLEtBQUs2RCxLQUFLNEIsTUFNbkU1QixLQUFLMEIsYUFBZSxJQUFJaUIsT0FBT0MsS0FBS2IsT0FBT3dELGFBQWF2RixLQUFLZSxvQkFGTyxJQUdwRWYsS0FBSzBCLGFBQWE4RCxPQUFPLFNBQVV4RixLQUFLeUIsTUFHNUNULEVBQUEzRSxVQUFBK0UsY0FBQSxlQUFBRixFQUFBbEIsS0FDSSxPQUFPLElBQUl5RixRQUFRLFNBQUNDLEVBQVNDLEdBQ3pCLFFBQTZCLElBQWxCdkcsT0FBT3VELFFBQTRELEdBQWxDdkQsT0FBT3dHLHdCQUcvQyxPQUZBakcsUUFBUUMsSUFBSSxrQkFDWjhGLEVBQVEsVUFJWixJQUFNRyxFQUFPL0YsU0FBU2dHLGNBQWMsVUFDcENELEVBQUtFLEtBQU8sa0JBQ1pGLEVBQUtHLGFBQWEsUUFBUyxRQUMzQkgsRUFBS0csYUFBYSxRQUFTLFFBQzNCSCxFQUFLSSxJQUFNLGdFQUFrRS9FLEVBQUtWLE9BQ2xGcUYsRUFBS0ssT0FBUyxXQUNWUixFQUFRLFdBRVo1RixTQUFTcUcsS0FBS0MsWUFBWVAsTUFJM0I3RSxFQUFBaUQsS0FBUCxTQUFZb0MsR0FDSGpILE9BQU9rSCxRQUlabEgsT0FBT2tILE1BQU1DLEdBQUdDLGFBQWEsb0NBQXNDSCxHQUMvRGpILE9BQU9PLFNBQ1BBLFFBQVE4RyxNQUFNN0osTUFBTStDLFFBQVMsQ0FDekIsc0JBQXdCMEcsRUFDeEIsb0JBQ0EsMEJBSWhCckYsRUE3T0EsQ0FBd0IwRixFQUFBLFNBK09UbkgsRUFBQTs7OztpbkNDelBmb0gsRUFBQSxTQUFBMUYsR0FHSSxTQUFBMEYsRUFBWXZHLEdBQVosSUFBQWMsRUFDSUQsRUFBQTFFLEtBQUF5RCxLQUFNSSxJQUFVSixZQUdoQmtCLEVBQUs0QyxRQUFVNUMsRUFBSzRDLFFBQVFoRixLQUFLb0MsR0FDakNBLEVBQUtHLGFBQWVILEVBQUtHLGFBQWF2QyxLQUFLb0MsR0FFM0NBLEVBQUs0QyxVQUNMbkUsUUFBUUMsSUFBSXNCLEtBNkRwQixPQXhFd0IrQixFQUFBMEQsRUFBQTFGLEdBY2IwRixFQUFBdEssVUFBQXlILFFBQVAsZUFBQTVDLEVBQUFsQixLQUNRNEcsRUFBVyxFQUNYQyxFQUFXLEVBQ1g3RyxLQUFLYSxXQUNMK0YsRUFBV0UsV0FBVzlHLEtBQUthLFNBQVN0QyxRQUVwQ3lCLEtBQUtjLFdBQ0wrRixFQUFXQyxXQUFXOUcsS0FBS2MsU0FBU3ZDLFFBRXhDd0ksRUFBQUMsRUFBU0MsWUFBY2pILEtBQUtRLE9BQzVCUixLQUFLeUIsSUFBTSxJQUFJeUYsRUFBQSxJQUFJLENBQ2Y5RyxVQUFXSixLQUFLSSxVQUNoQitHLE1BQU8scUNBQ1BsRixPQUFRLENBQUM0RSxFQUFVRCxHQUNuQjVCLEtBQU0sS0FHVmhGLEtBQUt5QixJQUFJMkYsR0FBRyxRQUFTLFNBQUNDLEdBQ1osSUFBQUMsRUFBQUQsRUFBQUUsT0FBRS9ELEVBQUE4RCxFQUFBOUQsSUFBS0YsRUFBQWdFLEVBQUFoRSxJQUNScEMsRUFBS0wsVUFBYUssRUFBS0osV0FHNUJJLEVBQUtMLFNBQVN0QyxNQUFRK0UsRUFBSWtFLFdBQzFCdEcsRUFBS0osU0FBU3ZDLE1BQVFpRixFQUFJZ0UsY0FHOUJ4SCxLQUFLcUIsZ0JBR0ZzRixFQUFBdEssVUFBQWdGLGFBQVAsZUFBQUgsRUFBQWxCLEtBQ1UyQixFQUFXLElBQUk4RixFQUFBVCxFQUFlLENBQ2hDQyxZQUFhakgsS0FBS1EsT0FDbEJzQixPQUFRLENBQ0o0RixNQUFPLFVBRVhDLFNBQVVaLEVBQUFDLEVBQ1ZZLE9BQVEsMkJBSVpqRyxFQUFTeUYsR0FBRyxTQUFVLFNBQUN2RSxHQUNuQmxELFFBQVFDLElBQUlpRCxHQUNaM0IsRUFBS0gsb0JBQW9CeEMsTUFBUXNFLEVBQU0vRixPQUFPK0ssV0FFeEMsSUFBQVAsRUFBQVEsRUFBQWpGLEVBQUEvRixPQUFBc0csU0FBQTJFLFlBQUEsR0FBQ3ZFLEVBQUE4RCxFQUFBLEdBQUtoRSxFQUFBZ0UsRUFBQSxHQUNacEcsRUFBS0wsU0FBU3RDLE1BQVErRSxFQUN0QnBDLEVBQUtKLFNBQVN2QyxNQUFRaUYsSUFHMUJ4RCxLQUFLSSxVQUFVNEgsV0FBV2pJLGNBQWMsYUFBYXFHLFlBQVl6RSxFQUFTc0csTUFBTWpJLEtBQUt5QixNQUVyRjlCLFFBQVFDLElBQUlJLEtBQUtlLG9CQUFvQnhDLE9BQ3JDb0QsRUFBU3VHLE1BQU1sSSxLQUFLZSxvQkFBb0J4QyxRQU1oRG9JLEVBeEVBLENBQXdCd0IsRUFBQSxTQTBFVDVJLEVBQUE7Ozs7NkRDaEZmbkMsRUFBQWdCLEVBQUFtQixHQUFBLElBQUE2SSxFQUFBaEwsMkJBQUEscUNBRUFpTCxFQUFBLFdBcUJJLFNBQUFBLEVBQVlDLEdBR1IsR0FGQXRJLEtBQUtzSSxRQUFVQSxFQUNmdEksS0FBS3VJLE9BQVN6SSxTQUFTQyxjQUFjLDRCQUNoQ0MsS0FBS3VJLE9BQVYsQ0FJQSxJQUFNQyxFQUF3QnhJLEtBQUtzSSxRQUFRakksUUFBUW9JLFVBQ25EekksS0FBS3lJLFVBQVlKLEVBQWVLLGVBQWVGLEdBRy9DeEksS0FBSzJJLHFCQUF1QjNJLEtBQUsySSxxQkFBcUI3SixLQUFLa0IsTUFDM0RBLEtBQUs0SSxVQUFZNUksS0FBSzRJLFVBQVU5SixLQUFLa0IsTUFHckNBLEtBQUt1SSxPQUFPaEcsaUJBQWlCLFNBQVV2QyxLQUFLMkksc0JBRzVDM0ksS0FBSzRJLFVBQVU1SSxLQUFLdUksT0FBT2hLLFFBc0NuQyxPQXZFa0I4SixFQUFBSyxlQUFkLFNBQTZCRyxHQUN6QixJQUFNcE4sRUFBT3FOLEtBQUtDLE1BQU1GLEdBSXhCLE9BSDRCek0sT0FBTzRNLE9BQU92TixHQUNKZ0csSUFBSSxTQUFDbEQsR0FBZ0MsV0FBSTZKLEVBQUEsUUFBUzdKLE1Bc0NwRjhKLEVBQUFoTSxVQUFBc00scUJBQVIsU0FBNkI5RixHQUN6QixJQUFNb0csRUFBNEJwRyxFQUFNb0csT0FDeENqSixLQUFLNEksVUFBVUssRUFBTzFLLFFBT2xCOEosRUFBQWhNLFVBQUF1TSxVQUFSLFNBQWtCTSxHQUNkLElBQU1DLEVBQThCbkosS0FBS3lJLFVBQ3BDVyxLQUFLLFNBQUNDLEdBQWlDLE9BQUFBLEVBQVNILFNBQVdBLElBQ2hFLElBQUtDLEVBQ0QsT0FBTyxFQUdYLElBQU1HLEVBQWtDdEosS0FBS3NJLFFBQ3hDdkksY0FBYyxtQkFBbUJvSixFQUFpQkQsT0FBTSxNQUM3RCxRQUFLSSxJQUtMdEosS0FBS3NJLFFBQVFwSSxpQkFBaUIsbUJBQ3pCQyxRQUFRLFNBQUNtSSxHQUF5QixPQUFBQSxFQUFRaUIsVUFBVUMsT0FBTyxZQUVoRUYsRUFBZ0JDLFVBQVVFLElBQUksV0FFdkIsSUFFZnBCLEVBN0VBOzs7OzZEQ0RBakwsRUFBQWdCLEVBQUFtQixHQUFBLElBQUFtSyxFQUFBLFdBVUEsT0FMSSxTQUFZQyxHQUNSM0osS0FBS2tKLE9BQVNTLEVBQUtULE9BQ25CbEosS0FBS2xDLEtBQU82TCxFQUFLN0wsS0FDakJrQyxLQUFLNEosWUFBY0QsRUFBS0MsYUFSaEM7Ozs7OENDREEsSUFBQUMsRUFBY3pNLDJNQUFRLDZNQUV0QixpQkFBQXlNLE1BQUEsRUFBNENwTSxFQUFBMUIsRUFBUzhOLEVBQUEsTUFPckQsSUFBQUMsRUFBQSxDQUFlQyxLQUFBLEVBRWZDLGVBUEFBLEVBUUFDLGdCQUFBQyxHQUVhOU0seURBQVEsK0NBQVJBLENBQTJEeU0sRUFBQUMsR0FFeEVELEVBQUFNLFNBQUExTSxFQUFBRCxRQUFBcU0sRUFBQU0iLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIGluc3RhbGwgYSBKU09OUCBjYWxsYmFjayBmb3IgY2h1bmsgbG9hZGluZ1xuIFx0ZnVuY3Rpb24gd2VicGFja0pzb25wQ2FsbGJhY2soZGF0YSkge1xuIFx0XHR2YXIgY2h1bmtJZHMgPSBkYXRhWzBdO1xuIFx0XHR2YXIgbW9yZU1vZHVsZXMgPSBkYXRhWzFdO1xuIFx0XHR2YXIgZXhlY3V0ZU1vZHVsZXMgPSBkYXRhWzJdO1xuXG4gXHRcdC8vIGFkZCBcIm1vcmVNb2R1bGVzXCIgdG8gdGhlIG1vZHVsZXMgb2JqZWN0LFxuIFx0XHQvLyB0aGVuIGZsYWcgYWxsIFwiY2h1bmtJZHNcIiBhcyBsb2FkZWQgYW5kIGZpcmUgY2FsbGJhY2tcbiBcdFx0dmFyIG1vZHVsZUlkLCBjaHVua0lkLCBpID0gMCwgcmVzb2x2ZXMgPSBbXTtcbiBcdFx0Zm9yKDtpIDwgY2h1bmtJZHMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRjaHVua0lkID0gY2h1bmtJZHNbaV07XG4gXHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdKSB7XG4gXHRcdFx0XHRyZXNvbHZlcy5wdXNoKGluc3RhbGxlZENodW5rc1tjaHVua0lkXVswXSk7XG4gXHRcdFx0fVxuIFx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IDA7XG4gXHRcdH1cbiBcdFx0Zm9yKG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG4gXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcbiBcdFx0XHRcdG1vZHVsZXNbbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRpZihwYXJlbnRKc29ucEZ1bmN0aW9uKSBwYXJlbnRKc29ucEZ1bmN0aW9uKGRhdGEpO1xuXG4gXHRcdHdoaWxlKHJlc29sdmVzLmxlbmd0aCkge1xuIFx0XHRcdHJlc29sdmVzLnNoaWZ0KCkoKTtcbiBcdFx0fVxuXG4gXHRcdC8vIGFkZCBlbnRyeSBtb2R1bGVzIGZyb20gbG9hZGVkIGNodW5rIHRvIGRlZmVycmVkIGxpc3RcbiBcdFx0ZGVmZXJyZWRNb2R1bGVzLnB1c2guYXBwbHkoZGVmZXJyZWRNb2R1bGVzLCBleGVjdXRlTW9kdWxlcyB8fCBbXSk7XG5cbiBcdFx0Ly8gcnVuIGRlZmVycmVkIG1vZHVsZXMgd2hlbiBhbGwgY2h1bmtzIHJlYWR5XG4gXHRcdHJldHVybiBjaGVja0RlZmVycmVkTW9kdWxlcygpO1xuIFx0fTtcbiBcdGZ1bmN0aW9uIGNoZWNrRGVmZXJyZWRNb2R1bGVzKCkge1xuIFx0XHR2YXIgcmVzdWx0O1xuIFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgZGVmZXJyZWRNb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0dmFyIGRlZmVycmVkTW9kdWxlID0gZGVmZXJyZWRNb2R1bGVzW2ldO1xuIFx0XHRcdHZhciBmdWxmaWxsZWQgPSB0cnVlO1xuIFx0XHRcdGZvcih2YXIgaiA9IDE7IGogPCBkZWZlcnJlZE1vZHVsZS5sZW5ndGg7IGorKykge1xuIFx0XHRcdFx0dmFyIGRlcElkID0gZGVmZXJyZWRNb2R1bGVbal07XG4gXHRcdFx0XHRpZihpbnN0YWxsZWRDaHVua3NbZGVwSWRdICE9PSAwKSBmdWxmaWxsZWQgPSBmYWxzZTtcbiBcdFx0XHR9XG4gXHRcdFx0aWYoZnVsZmlsbGVkKSB7XG4gXHRcdFx0XHRkZWZlcnJlZE1vZHVsZXMuc3BsaWNlKGktLSwgMSk7XG4gXHRcdFx0XHRyZXN1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IGRlZmVycmVkTW9kdWxlWzBdKTtcbiBcdFx0XHR9XG4gXHRcdH1cbiBcdFx0cmV0dXJuIHJlc3VsdDtcbiBcdH1cblxuIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3NcbiBcdC8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuIFx0Ly8gUHJvbWlzZSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbiBcdHZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG4gXHRcdFwibWFpblwiOiAwXG4gXHR9O1xuXG4gXHR2YXIgZGVmZXJyZWRNb2R1bGVzID0gW107XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdHZhciBqc29ucEFycmF5ID0gd2luZG93W1wid2VicGFja0pzb25wXCJdID0gd2luZG93W1wid2VicGFja0pzb25wXCJdIHx8IFtdO1xuIFx0dmFyIG9sZEpzb25wRnVuY3Rpb24gPSBqc29ucEFycmF5LnB1c2guYmluZChqc29ucEFycmF5KTtcbiBcdGpzb25wQXJyYXkucHVzaCA9IHdlYnBhY2tKc29ucENhbGxiYWNrO1xuIFx0anNvbnBBcnJheSA9IGpzb25wQXJyYXkuc2xpY2UoKTtcbiBcdGZvcih2YXIgaSA9IDA7IGkgPCBqc29ucEFycmF5Lmxlbmd0aDsgaSsrKSB3ZWJwYWNrSnNvbnBDYWxsYmFjayhqc29ucEFycmF5W2ldKTtcbiBcdHZhciBwYXJlbnRKc29ucEZ1bmN0aW9uID0gb2xkSnNvbnBGdW5jdGlvbjtcblxuXG4gXHQvLyBhZGQgZW50cnkgbW9kdWxlIHRvIGRlZmVycmVkIGxpc3RcbiBcdGRlZmVycmVkTW9kdWxlcy5wdXNoKFswLFwidmVuZG9yXCJdKTtcbiBcdC8vIHJ1biBkZWZlcnJlZCBtb2R1bGVzIHdoZW4gcmVhZHlcbiBcdHJldHVybiBjaGVja0RlZmVycmVkTW9kdWxlcygpO1xuIiwiaW1wb3J0IFByb3ZpZGVyU2VsZWN0IGZyb20gJy4vY29tcG9uZW50cy9Qcm92aWRlclNlbGVjdCc7XG5pbXBvcnQgTWFwQm94TWFwIGZyb20gJy4vY29tcG9uZW50cy9NYXBCb3hNYXAnO1xuaW1wb3J0IEdvb2dsZU1hcCBmcm9tICcuL2NvbXBvbmVudHMvR29vZ2xlTWFwJztcblxuY2xhc3MgQWRtaW4ge1xuICAgIHB1YmxpYyBwcm92aWRlclNlbGVjdDogUHJvdmlkZXJTZWxlY3Q7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ2hlbGxvIHdvcmxkJyk7XG4gICAgICAgIGNvbnN0IHByb3ZpZGVyU2VsZWN0OiBIVE1MRGl2RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXByb3ZpZGVyLXNlbGVjdF0nKTtcbiAgICAgICAgaWYgKHByb3ZpZGVyU2VsZWN0KSB7XG4gICAgICAgICAgICB0aGlzLnByb3ZpZGVyU2VsZWN0ID0gbmV3IFByb3ZpZGVyU2VsZWN0KHByb3ZpZGVyU2VsZWN0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGlucHV0TWFwczogTm9kZUxpc3RPZjxIVE1MRGl2RWxlbWVudD4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1tYXAtcHJvdmlkZXJdJyk7XG4gICAgICAgIGlmIChpbnB1dE1hcHMgJiYgaW5wdXRNYXBzLmxlbmd0aCkge1xuICAgICAgICAgICAgaW5wdXRNYXBzLmZvckVhY2goKGNvbnRhaW5lcjogSFRNTERpdkVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhjb250YWluZXIuZGF0YXNldC5tYXBQcm92aWRlcik7XG4gICAgICAgICAgICAgICAgaWYgKGNvbnRhaW5lci5kYXRhc2V0Lm1hcFByb3ZpZGVyID09PSAnbWFwYm94Jykge1xuICAgICAgICAgICAgICAgICAgICBuZXcgTWFwQm94TWFwKGNvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb250YWluZXIuZGF0YXNldC5tYXBQcm92aWRlciA9PT0gJ2dvb2dsZScpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3IEdvb2dsZU1hcChjb250YWluZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5uZXcgQWRtaW4oKTtcblxuY29uc29sZS5sb2coZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtbWFwLXByb3ZpZGVyXScpKTsiLCJhYnN0cmFjdCBjbGFzcyBBYnN0cmFjdE1hcCB7XG4gICAgcHJvdGVjdGVkIGFwaUtleTogc3RyaW5nO1xuICAgIHByb3RlY3RlZCBjb250YWluZXI6IEhUTUxEaXZFbGVtZW50O1xuICAgIHByb3RlY3RlZCBwcmVmaXg6IHN0cmluZztcbiAgICBwcm90ZWN0ZWQgbGF0SW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgcHJvdGVjdGVkIGxuZ0lucHV0OiBIVE1MSW5wdXRFbGVtZW50O1xuICAgIHByb3RlY3RlZCBnZW9jb2RlclN0cmluZ0lucHV0OiBIVE1MSW5wdXRFbGVtZW50O1xuXG4gICAgY29uc3RydWN0b3IoY29udGFpbmVyOiBIVE1MRGl2RWxlbWVudCkge1xuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICAgICAgdGhpcy5hcGlLZXkgPSBjb250YWluZXIuZGF0YXNldC5tYXBBcGlLZXk7XG4gICAgICAgIHRoaXMucHJlZml4ID0gY29udGFpbmVyLmRhdGFzZXQuZmllbGRQcmVmaXg7XG4gXG4gICAgICAgIGNvbnN0IHBhcmVudEVsZW1lbnQgPSBjb250YWluZXIucGFyZW50RWxlbWVudDtcbiAgICAgICAgdGhpcy5sYXRJbnB1dCA9IHBhcmVudEVsZW1lbnQucXVlcnlTZWxlY3RvcignaW5wdXRbbmFtZSo9XCJsYXRcIl0nKTtcbiAgICAgICAgdGhpcy5sbmdJbnB1dCA9IHBhcmVudEVsZW1lbnQucXVlcnlTZWxlY3RvcignaW5wdXRbbmFtZSo9XCJsbmdcIl0nKTtcbiAgICAgICAgdGhpcy5nZW9jb2RlclN0cmluZ0lucHV0ID0gcGFyZW50RWxlbWVudC5xdWVyeVNlbGVjdG9yKCdpbnB1dFtuYW1lKj1cImdlb2NvZGVyU3RyaW5nXCJdJyk7XG4gICAgfVxuXG4gICAgcHVibGljIGFic3RyYWN0IGluaXRNYXAoKTogdm9pZDtcbiAgICBwdWJsaWMgYWJzdHJhY3QgaW5pdEdlb2NvZGVyKCk6IHZvaWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFic3RyYWN0TWFwOyIsIi8vIGltcG9ydCB7IGdvb2dsZVBsYWNlc0ZpZWxkTWFwIGFzIGZpZWxkTWFwIH0gZnJvbSAnLi9GaWVsZE1hcHMnO1xuaW1wb3J0IEFic3RyYWN0TWFwIGZyb20gJy4vQWJzdHJhY3RNYXAnO1xuaW1wb3J0IHsgfSBmcm9tICdnb29nbGVtYXBzJztcblxuZGVjbGFyZSBnbG9iYWwge1xuICAgIGludGVyZmFjZSBXaW5kb3cge1xuICAgICAgICBnb29nbGU6IGFueTtcbiAgICAgICAgc2ltcGxlTWFwc0xvYWRpbmdHb29nbGU6IGJvb2xlYW47XG4gICAgICAgIENyYWZ0OiBhbnk7XG4gICAgfVxufVxuXG5pbnRlcmZhY2UgSUZpZWxkcyB7XG4gICAgYXBpOiBDYWxsYWJsZUZ1bmN0aW9uLFxuICAgIGlucHV0OiBzdHJpbmdcbn07XG5cbmNsYXNzIEdvb2dsZU1hcCBleHRlbmRzIEFic3RyYWN0TWFwIHtcbiAgICBwdWJsaWMgbWFwOiBnb29nbGUubWFwcy5NYXA7XG4gICAgcHJpdmF0ZSBhdXRvY29tcGxldGU6IGdvb2dsZS5tYXBzLnBsYWNlcy5BdXRvY29tcGxldGU7XG4gICAgcHJpdmF0ZSBnZW9jb2RlcjogYW55O1xuICAgIHByaXZhdGUgY2FyZDogYW55O1xuICAgIC8vIHByaXZhdGUgaW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBtYXBDZW50ZXI6IGdvb2dsZS5tYXBzLkxhdExuZztcbiAgICBwcml2YXRlIG1hcmtlcjogYW55O1xuICAgIHByaXZhdGUgcGxhY2VzOiBhbnk7XG4gICAgcHJpdmF0ZSBjZW50ZXI6IHN0cmluZztcbiAgICBwcml2YXRlIHBsYWNlSWQ6IHN0cmluZztcbiAgICBwcml2YXRlIGZpbGxFbnRyeTogYm9vbGVhbjtcbiAgICAvLyBwcml2YXRlIGF1dG9jb21wbGV0ZTogZ29vZ2xlLlxuICAgIGNvbnN0cnVjdG9yKGNvbnRhaW5lcjogSFRNTERpdkVsZW1lbnQpIHtcbiAgICAgICAgc3VwZXIoY29udGFpbmVyKTtcblxuICAgICAgICB0aGlzLmdldFBsYWNlQnlJZCA9IHRoaXMuZ2V0UGxhY2VCeUlkLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMubG9hZEdvb2dsZUFwaSA9IHRoaXMubG9hZEdvb2dsZUFwaS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmluaXRHZW9jb2RlciA9IHRoaXMuaW5pdEdlb2NvZGVyLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuYXV0b0NvbXBsZXRlTGlzdGVuZXIgPSB0aGlzLmF1dG9Db21wbGV0ZUxpc3RlbmVyLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMucGxhY2VDaGFuZ2VkSGFuZGxlciA9IHRoaXMucGxhY2VDaGFuZ2VkSGFuZGxlci5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmZpZWxkTWFwID0gdGhpcy5maWVsZE1hcC5iaW5kKHRoaXMpO1xuXG4gICAgICAgIHRoaXMubWFwID0gbnVsbDtcbiAgICAgICAgdGhpcy5hdXRvY29tcGxldGUgPSBudWxsO1xuICAgICAgICB0aGlzLmdlb2NvZGVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5jYXJkID0gbnVsbDtcbiAgICAgICAgLy8gdGhpcy5pbnB1dCA9IG51bGw7XG4gICAgICAgIHRoaXMubWFwQ2VudGVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5tYXJrZXIgPSBudWxsO1xuICAgICAgICB0aGlzLnBsYWNlcyA9IG51bGw7XG4gICAgICAgIHRoaXMuZmlsbEVudHJ5ID0gdHJ1ZTtcblxuICAgICAgICB0aGlzLmNlbnRlciA9IHRoaXMuZ2VvY29kZXJTdHJpbmdJbnB1dC52YWx1ZSB8fCAnMjAwMCBXIE1vcmVoZWFkIFN0LCBDaGFybG90dGUsIE5DJztcblxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMubG9hZEdvb2dsZUFwaSgpXG4gICAgICAgICAgICAgICAgLnRoZW4odGhpcy5pbml0R2VvY29kZXIpO1xuICAgICAgICB9LCAyMDApO1xuXG5cbiAgICAgICAgaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YWJzJykpIHtcbiAgICAgICAgICAgIFtdLnNsaWNlLmNhbGwoXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RhYnMnKS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYScpXG4gICAgICAgICAgICApLm1hcCgoZWw6IEVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeCA9IHRoaXMubWFwLmdldFpvb20oKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGMgPSB0aGlzLm1hcC5nZXRDZW50ZXIoKTtcblxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LnRyaWdnZXIodGhpcy5tYXAsICdyZXNpemUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWFwLnNldFpvb20oeCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1hcC5zZXRDZW50ZXIoYyk7XG4gICAgICAgICAgICAgICAgICAgIH0sIDEpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zb2xlLmxvZygnR29vZ2xlTWFwJywgdGhpcyk7XG4gICAgfVxuXG4gICAgZmllbGRNYXAoKTogSUZpZWxkc1tdIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBhcGk6IGZ1bmN0aW9uIChwbGFjZTogZ29vZ2xlLm1hcHMucGxhY2VzLlBsYWNlUmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwbGFjZS5nZW9tZXRyeS5sb2NhdGlvbi5sYXQoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGlucHV0OiBgW25hbWU9XCIke3RoaXMubGF0SW5wdXQubmFtZX1cIl1gXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGFwaTogZnVuY3Rpb24gKHBsYWNlOiBnb29nbGUubWFwcy5wbGFjZXMuUGxhY2VSZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBsYWNlLmdlb21ldHJ5LmxvY2F0aW9uLmxuZygpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaW5wdXQ6IGBbbmFtZT1cIiR7dGhpcy5sbmdJbnB1dC5uYW1lfVwiXWBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXTtcbiAgICB9XG5cbiAgICBpbml0R2VvY29kZXIoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdpbml0R2VvY29kZXInKTtcbiAgICAgICAgdGhpcy5nZW9jb2RlciA9IG5ldyBnb29nbGUubWFwcy5HZW9jb2RlcigpO1xuICAgICAgICB0aGlzLmdlb2NvZGVyLmdlb2NvZGUoe1xuICAgICAgICAgICAgYWRkcmVzczogdGhpcy5jZW50ZXJcbiAgICAgICAgfSxcbiAgICAgICAgICAgIChyZXN1bHRzOiBhbnksIHN0YXR1czogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVzdWx0cywgc3RhdHVzKTtcbiAgICAgICAgICAgICAgICBpZiAoc3RhdHVzID09ICdPSycpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXBDZW50ZXIgPSByZXN1bHRzWzBdLmdlb21ldHJ5LmxvY2F0aW9uO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmluaXRNYXAoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hdXRvQ29tcGxldGVMaXN0ZW5lcigpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnBsYWNlSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGxhY2VzID0gbmV3IGdvb2dsZS5tYXBzLnBsYWNlcy5QbGFjZXNTZXJ2aWNlKHRoaXMubWFwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0UGxhY2VCeUlkKHRoaXMucGxhY2VJZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBHb29nbGVNYXAuZmFpbChgQ291bGRuJ3QgZ2VvY29kZSAke3RoaXMuY2VudGVyfWApO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGdldFBsYWNlQnlJZChwbGFjZUlkOiBhbnkpIHtcbiAgICAgICAgdGhpcy5wbGFjZXMuZ2V0RGV0YWlscyh7XG4gICAgICAgICAgICBwbGFjZUlkOiBwbGFjZUlkXG4gICAgICAgIH0sIChwbGFjZTogYW55LCBzdGF0dXM6IGFueSkgPT4ge1xuICAgICAgICAgICAgaWYgKHN0YXR1cyA9PSAnT0snKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRNYXJrZXIocGxhY2UpO1xuICAgICAgICAgICAgICAgIHRoaXMuZ2VvY29kZXJTdHJpbmdJbnB1dC52YWx1ZSA9IHBsYWNlLm5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbXBsZXRlRW50cnkocGxhY2U6IGFueSkge1xuICAgICAgICBmb3IgKGxldCBpIGluIHRoaXMuZmllbGRNYXAoKSkge1xuICAgICAgICAgICAgY29uc3QgZmllbGQgPSB0aGlzLmZpZWxkTWFwKClbaV07XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhmaWVsZCk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGZpZWxkLmFwaSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGZpZWxkLmFwaShwbGFjZSk7XG4gICAgICAgICAgICAgICAgaWYgKGZpZWxkLmlucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlucHV0OiBIVE1MSW5wdXRFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihmaWVsZC5pbnB1dCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQudmFsdWUgPSByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlucHV0OiBIVE1MSW5wdXRFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihmaWVsZC5pbnB1dCk7XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0LnZhbHVlID0gcGxhY2VbZmllbGQuYXBpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRNYXJrZXIocGxhY2U6IGFueSkge1xuICAgICAgICB0aGlzLm1hcmtlci5zZXRWaXNpYmxlKGZhbHNlKTtcblxuICAgICAgICBpZiAoIXBsYWNlLmdlb21ldHJ5KSB7XG4gICAgICAgICAgICBHb29nbGVNYXAuZmFpbChgTm8gZGV0YWlscyBhdmFpbGFibGUgZm9yIGlucHV0OiAnJHtwbGFjZS5uYW1lfSdgKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwbGFjZS5nZW9tZXRyeS52aWV3cG9ydCkge1xuICAgICAgICAgICAgdGhpcy5tYXAuZml0Qm91bmRzKHBsYWNlLmdlb21ldHJ5LnZpZXdwb3J0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubWFwLnNldENlbnRlcihwbGFjZS5nZW9tZXRyeS5sb2NhdGlvbik7XG4gICAgICAgICAgICB0aGlzLm1hcC5zZXRab29tKDE3KTsgLy8gV2h5IDE3PyBCZWNhdXNlIGl0IGxvb2tzIGdvb2QuXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm1hcmtlci5zZXRQb3NpdGlvbihwbGFjZS5nZW9tZXRyeS5sb2NhdGlvbik7XG4gICAgICAgIHRoaXMubWFya2VyLnNldFZpc2libGUodHJ1ZSk7XG4gICAgfVxuXG4gICAgYXV0b0NvbXBsZXRlTGlzdGVuZXIoKSB7XG4gICAgICAgIHRoaXMuYXV0b2NvbXBsZXRlLmFkZExpc3RlbmVyKCdwbGFjZV9jaGFuZ2VkJywgdGhpcy5wbGFjZUNoYW5nZWRIYW5kbGVyKTtcbiAgICB9XG5cbiAgICBwbGFjZUNoYW5nZWRIYW5kbGVyKCkge1xuICAgICAgICBsZXQgcGxhY2UgPSB0aGlzLmF1dG9jb21wbGV0ZS5nZXRQbGFjZSgpO1xuICAgICAgICBjb25zb2xlLmxvZyhwbGFjZSk7XG4gICAgICAgIGRlYnVnZ2VyO1xuICAgICAgICB0aGlzLnNldE1hcmtlcihwbGFjZSk7XG5cbiAgICAgICAgaWYgKHRoaXMuZmlsbEVudHJ5KSB7XG4gICAgICAgICAgICB0aGlzLmNvbXBsZXRlRW50cnkocGxhY2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGYgPSB0aGlzLmNvbnRhaW5lci5pZC5zcGxpdCgnLScpWzFdO1xuICAgICAgICAgICAgY29uc3QgaW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBpbnB1dFtpZD1cIiR7dGhpcy5jb250YWluZXIuaWR9XCJdYCk7XG4gICAgICAgICAgICBpZiAoaW5wdXQpIHtcbiAgICAgICAgICAgICAgICBpbnB1dC52YWx1ZSA9IHBsYWNlLnBsYWNlX2lkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaW5pdE1hcCgpIHtcbiAgICAgICAgbGV0IG1hcE9wdGlvbnMgPSB7XG4gICAgICAgICAgICB6b29tOiAxNixcbiAgICAgICAgICAgIGNlbnRlcjogdGhpcy5tYXBDZW50ZXJcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBtYXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1tYXAtcHJvdmlkZXI9XCJnb29nbGVcIl0nKTtcbiAgICAgICAgY29uc29sZS5sb2cobWFwKTtcbiAgICAgICAgdGhpcy5tYXAgPSBuZXcgZ29vZ2xlLm1hcHMuTWFwKG1hcCwgbWFwT3B0aW9ucyk7XG5cbiAgICAgICAgLy8gc2V0IG1hcmtlclxuICAgICAgICB0aGlzLm1hcmtlciA9IG5ldyBnb29nbGUubWFwcy5NYXJrZXIoe1xuICAgICAgICAgICAgbWFwOiB0aGlzLm1hcCxcbiAgICAgICAgICAgIHBvc2l0aW9uOiB0aGlzLm1hcENlbnRlclxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBjb250cm9sc1xuICAgICAgICB0aGlzLmNhcmQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZ29vZ2xlbWFwZmllbGQtY2FyZCcpO1xuICAgICAgICB0aGlzLm1hcC5jb250cm9sc1tnb29nbGUubWFwcy5Db250cm9sUG9zaXRpb24uVE9QX1JJR0hUXS5wdXNoKHRoaXMuY2FyZCk7XG5cbiAgICAgICAgLy8gYXV0b2NvbXBsZXRlXG4gICAgICAgIC8vIHRoaXMuaW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYXV0b2NvbXBsZXRlJyk7XG4gICAgICAgIGNvbnN0IGF1dG9jb21wbGV0ZU9wdGlvbnM6IGdvb2dsZS5tYXBzLnBsYWNlcy5BdXRvY29tcGxldGVPcHRpb25zID0ge307XG5cbiAgICAgICAgdGhpcy5hdXRvY29tcGxldGUgPSBuZXcgZ29vZ2xlLm1hcHMucGxhY2VzLkF1dG9jb21wbGV0ZSh0aGlzLmdlb2NvZGVyU3RyaW5nSW5wdXQsIGF1dG9jb21wbGV0ZU9wdGlvbnMpO1xuICAgICAgICB0aGlzLmF1dG9jb21wbGV0ZS5iaW5kVG8oJ2JvdW5kcycsIHRoaXMubWFwKTtcbiAgICB9XG5cbiAgICBsb2FkR29vZ2xlQXBpKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cuZ29vZ2xlICE9PSAndW5kZWZpbmVkJyB8fCB3aW5kb3cuc2ltcGxlTWFwc0xvYWRpbmdHb29nbGUgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdEZWZlcnJpbmcnKTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKCdMb2FkZWQnKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGdtanMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICAgICAgICAgIGdtanMudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnO1xuICAgICAgICAgICAgZ21qcy5zZXRBdHRyaWJ1dGUoJ2FzeW5jJywgJ3RydWUnKTtcbiAgICAgICAgICAgIGdtanMuc2V0QXR0cmlidXRlKCdkZWZlcicsICd0cnVlJyk7XG4gICAgICAgICAgICBnbWpzLnNyYyA9ICdodHRwczovL21hcHMuZ29vZ2xlYXBpcy5jb20vbWFwcy9hcGkvanM/bGlicmFyaWVzPXBsYWNlcyZrZXk9JyArIHRoaXMuYXBpS2V5O1xuICAgICAgICAgICAgZ21qcy5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgnbG9hZGVkJyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChnbWpzKTtcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBzdGF0aWMgZmFpbChtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKCF3aW5kb3cuQ3JhZnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHdpbmRvdy5DcmFmdC5jcC5kaXNwbGF5RXJyb3IoJzxzdHJvbmc+R29vZ2xlTWFwRmllbGQ6PC9zdHJvbmc+ICcgKyBtZXNzYWdlKTtcbiAgICAgICAgaWYgKHdpbmRvdy5jb25zb2xlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yLmFwcGx5KGNvbnNvbGUsIFtcbiAgICAgICAgICAgICAgICAnJUdvb2dsZU1hcEZpZWxkOiAlYycgKyBtZXNzYWdlLFxuICAgICAgICAgICAgICAgICdmb250LXdlaWdodDpib2xkOycsXG4gICAgICAgICAgICAgICAgJ2ZvbnQtd2VpZ2h0Om5vcm1hbDsnXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgR29vZ2xlTWFwOyIsImltcG9ydCBtYXBib3hnbCwgeyBNYXAsIE1hcE1vdXNlRXZlbnQgfSBmcm9tICdtYXBib3gtZ2wnO1xuaW1wb3J0IE1hcGJveEdlb2NvZGVyIGZyb20gJ0BtYXBib3gvbWFwYm94LWdsLWdlb2NvZGVyJztcbmltcG9ydCBBYnN0cmFjdE1hcCBmcm9tICcuL0Fic3RyYWN0TWFwJztcblxuaW1wb3J0ICdtYXBib3gtZ2wvc3JjL2Nzcy9tYXBib3gtZ2wuY3NzJztcbmltcG9ydCAnQG1hcGJveC9tYXBib3gtZ2wtZ2VvY29kZXIvZGlzdC9tYXBib3gtZ2wtZ2VvY29kZXIuY3NzJztcblxuY2xhc3MgTWFwQm94TWFwIGV4dGVuZHMgQWJzdHJhY3RNYXAge1xuICAgIHB1YmxpYyBtYXA6IE1hcDtcblxuICAgIGNvbnN0cnVjdG9yKGNvbnRhaW5lcjogSFRNTERpdkVsZW1lbnQpIHtcbiAgICAgICAgc3VwZXIoY29udGFpbmVyKTtcbiAgICAgICAgXG4gICAgICAgIC8vIEJpbmRpbmdcbiAgICAgICAgdGhpcy5pbml0TWFwID0gdGhpcy5pbml0TWFwLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuaW5pdEdlb2NvZGVyID0gdGhpcy5pbml0R2VvY29kZXIuYmluZCh0aGlzKTtcblxuICAgICAgICB0aGlzLmluaXRNYXAoKTtcbiAgICAgICAgY29uc29sZS5sb2codGhpcyk7XG4gICAgfVxuXG4gICAgcHVibGljIGluaXRNYXAoKTogdm9pZCB7XG4gICAgICAgIGxldCBsYXRWYWx1ZSA9IDA7XG4gICAgICAgIGxldCBsbmdWYWx1ZSA9IDA7XG4gICAgICAgIGlmICh0aGlzLmxhdElucHV0KSB7XG4gICAgICAgICAgICBsYXRWYWx1ZSA9IHBhcnNlRmxvYXQodGhpcy5sYXRJbnB1dC52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMubG5nSW5wdXQpIHtcbiAgICAgICAgICAgIGxuZ1ZhbHVlID0gcGFyc2VGbG9hdCh0aGlzLmxuZ0lucHV0LnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBtYXBib3hnbC5hY2Nlc3NUb2tlbiA9IHRoaXMuYXBpS2V5O1xuICAgICAgICB0aGlzLm1hcCA9IG5ldyBNYXAoe1xuICAgICAgICAgICAgY29udGFpbmVyOiB0aGlzLmNvbnRhaW5lcixcbiAgICAgICAgICAgIHN0eWxlOiAnbWFwYm94Oi8vc3R5bGVzL21hcGJveC9zdHJlZXRzLXYxMScsXG4gICAgICAgICAgICBjZW50ZXI6IFtsbmdWYWx1ZSwgbGF0VmFsdWVdLFxuICAgICAgICAgICAgem9vbTogMTMsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMubWFwLm9uKCdjbGljaycsIChlOiBNYXBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IGxuZywgbGF0IH0gPSBlLmxuZ0xhdDtcbiAgICAgICAgICAgIGlmICghdGhpcy5sYXRJbnB1dCB8fCAhdGhpcy5sbmdJbnB1dCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubGF0SW5wdXQudmFsdWUgPSBsYXQudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIHRoaXMubG5nSW5wdXQudmFsdWUgPSBsbmcudG9TdHJpbmcoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5pbml0R2VvY29kZXIoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgaW5pdEdlb2NvZGVyKCk6IHZvaWQge1xuICAgICAgICBjb25zdCBnZW9jb2RlciA9IG5ldyBNYXBib3hHZW9jb2Rlcih7XG4gICAgICAgICAgICBhY2Nlc3NUb2tlbjogdGhpcy5hcGlLZXksXG4gICAgICAgICAgICBtYXJrZXI6IHtcbiAgICAgICAgICAgICAgICBjb2xvcjogJ29yYW5nZSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtYXBib3hnbDogbWFwYm94Z2wsXG4gICAgICAgICAgICBvcmlnaW46ICdodHRwczovL2FwaS5tYXBib3guY29tJ1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gY29uc29sZS5sb2codGhpcy5jb250YWluZXIpO1xuICAgICAgICAvLyByZXR1cm47XG4gICAgICAgIGdlb2NvZGVyLm9uKCdyZXN1bHQnLCAoZXZlbnQ6IGFueSkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZXZlbnQpO1xuICAgICAgICAgICAgdGhpcy5nZW9jb2RlclN0cmluZ0lucHV0LnZhbHVlID0gZXZlbnQucmVzdWx0LnBsYWNlX25hbWU7XG5cbiAgICAgICAgICAgIGNvbnN0IFtsbmcsIGxhdF0gPSBldmVudC5yZXN1bHQuZ2VvbWV0cnkuY29vcmRpbmF0ZXM7XG4gICAgICAgICAgICB0aGlzLmxhdElucHV0LnZhbHVlID0gbGF0O1xuICAgICAgICAgICAgdGhpcy5sbmdJbnB1dC52YWx1ZSA9IGxuZztcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5jb250YWluZXIucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yKCcuZ2VvY29kZXInKS5hcHBlbmRDaGlsZChnZW9jb2Rlci5vbkFkZCh0aGlzLm1hcCkpO1xuXG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMuZ2VvY29kZXJTdHJpbmdJbnB1dC52YWx1ZSk7XG4gICAgICAgIGdlb2NvZGVyLnF1ZXJ5KHRoaXMuZ2VvY29kZXJTdHJpbmdJbnB1dC52YWx1ZSk7XG4gICAgICAgIC8vIGdlb2NvZGVyLlxuXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGdlb2NvZGVyLmdldElucHV0KCkpO1xuICAgICAgICAvLyB0aGlzLm1hcC5hZGRDb250cm9sKGdlb2NvZGVyKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE1hcEJveE1hcDsiLCJpbXBvcnQgSVByb3ZpZGVyIGZyb20gJy4uL2ludGVyZmFjZXMvSVByb3ZpZGVyJztcbmltcG9ydCBQcm92aWRlciBmcm9tICcuLi9tb2RlbHMvUHJvdmlkZXInO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQcm92aWRlclNlbGVjdCB7XG4gICAgLy8gU3RhdGljIG1ldGhvZHNcbiAgICAvKipcbiAgICAgKiBSZXR1cm4gdGhlIGF2YWlsYWJsZSBwcm92aWRlcnMgYmFzZWQgb24gdGhlIEpTT04gaW5wdXRcbiAgICAgKiBAcGFyYW0ganNvblxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgcGFyc2VQcm92aWRlcnMoanNvbjogc3RyaW5nKTogSVByb3ZpZGVyW10ge1xuICAgICAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShqc29uKTtcbiAgICAgICAgY29uc3QgdmFsdWVzOiBJUHJvdmlkZXJbXSA9IE9iamVjdC52YWx1ZXMoZGF0YSk7XG4gICAgICAgIGNvbnN0IHByb3ZpZGVyczogSVByb3ZpZGVyW10gPSB2YWx1ZXMubWFwKCh2YWx1ZTogSVByb3ZpZGVyKTogSVByb3ZpZGVyID0+IG5ldyBQcm92aWRlcih2YWx1ZSkpO1xuXG4gICAgICAgIHJldHVybiBwcm92aWRlcnM7XG4gICAgfVxuXG4gICAgLy8gRmllbGRzXG4gICAgcHVibGljIHNlY3Rpb246IEhUTUxEaXZFbGVtZW50O1xuICAgIHB1YmxpYyBzZWxlY3Q6IEhUTUxTZWxlY3RFbGVtZW50O1xuICAgIHB1YmxpYyBhY3RpdmU6IHN0cmluZztcbiAgICBwcml2YXRlIHByb3ZpZGVyczogSVByb3ZpZGVyW107XG5cbiAgICAvLyBDb25zdHJ1Y3RvclxuICAgIGNvbnN0cnVjdG9yKHNlY3Rpb246IEhUTUxEaXZFbGVtZW50KSB7XG4gICAgICAgIHRoaXMuc2VjdGlvbiA9IHNlY3Rpb247XG4gICAgICAgIHRoaXMuc2VsZWN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3NldHRpbmdzLXByb3ZpZGVyU2VsZWN0Jyk7XG4gICAgICAgIGlmICghdGhpcy5zZWxlY3QpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHByb3ZpZGVyc0pzb246IHN0cmluZyA9IHRoaXMuc2VjdGlvbi5kYXRhc2V0LnByb3ZpZGVycztcbiAgICAgICAgdGhpcy5wcm92aWRlcnMgPSBQcm92aWRlclNlbGVjdC5wYXJzZVByb3ZpZGVycyhwcm92aWRlcnNKc29uKTtcblxuICAgICAgICAvLyBNZXRob2QgYmluZGluZ1xuICAgICAgICB0aGlzLmhhbmRsZVByb3ZpZGVyQ2hhbmdlID0gdGhpcy5oYW5kbGVQcm92aWRlckNoYW5nZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnNldEFjdGl2ZSA9IHRoaXMuc2V0QWN0aXZlLmJpbmQodGhpcyk7XG5cbiAgICAgICAgLy8gRXZlbnQgbGlzdGVuZXJzXG4gICAgICAgIHRoaXMuc2VsZWN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMuaGFuZGxlUHJvdmlkZXJDaGFuZ2UpO1xuXG4gICAgICAgIC8vIEluaXRpYWxpemUgc3RhdGVcbiAgICAgICAgdGhpcy5zZXRBY3RpdmUodGhpcy5zZWxlY3QudmFsdWUpO1xuICAgIH1cblxuICAgIC8vIEluc3RhbmNlIG1ldGhvZHNcbiAgICAvKipcbiAgICAgKiBIYW5kbGUgY2hhbmdlcyB0byB0aGUgcHJvdmlkZXIgc2VsZWN0XG4gICAgICogQHBhcmFtIGV2ZW50IENoYW5nZSBldmVudCBlbWl0dGVkIGZyb20gSFRNTFNlbGVjdEVsZW10blxuICAgICAqL1xuICAgIHByaXZhdGUgaGFuZGxlUHJvdmlkZXJDaGFuZ2UoZXZlbnQ6IEV2ZW50KSB7XG4gICAgICAgIGNvbnN0IHRhcmdldDogSFRNTFNlbGVjdEVsZW1lbnQgPSBldmVudC50YXJnZXQgYXMgSFRNTFNlbGVjdEVsZW1lbnQ7XG4gICAgICAgIHRoaXMuc2V0QWN0aXZlKHRhcmdldC52YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2hvdyB0aGUgYWN0aXZlIHNlY3Rpb25cbiAgICAgKiBAcGFyYW0gaGFuZGxlIHN0cmluZyBQcm92aWRlciBoYW5kbGVcbiAgICAgKi9cbiAgICBwcml2YXRlIHNldEFjdGl2ZShoYW5kbGU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCBtYXRjaGluZ1Byb3ZpZGVyOiBJUHJvdmlkZXIgPSB0aGlzLnByb3ZpZGVyc1xuICAgICAgICAgICAgLmZpbmQoKHByb3ZpZGVyOiBJUHJvdmlkZXIpOiBib29sZWFuID0+IHByb3ZpZGVyLmhhbmRsZSA9PT0gaGFuZGxlKTtcbiAgICAgICAgaWYgKCFtYXRjaGluZ1Byb3ZpZGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBtYXRjaGluZ1NlY3Rpb246IEhUTUxEaXZFbGVtZW50ID0gdGhpcy5zZWN0aW9uXG4gICAgICAgICAgICAucXVlcnlTZWxlY3RvcihgW2RhdGEtcHJvdmlkZXI9XCIke21hdGNoaW5nUHJvdmlkZXIuaGFuZGxlfVwiXWApO1xuICAgICAgICBpZiAoIW1hdGNoaW5nU2VjdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRm91bmQgYSBtYXRjaGluZyBzZWN0aW9uLCBoaWRlIG90aGVyc1xuICAgICAgICB0aGlzLnNlY3Rpb24ucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtcHJvdmlkZXJdJylcbiAgICAgICAgICAgIC5mb3JFYWNoKChzZWN0aW9uOiBIVE1MRWxlbWVudCkgPT4gc2VjdGlvbi5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKSk7XG5cbiAgICAgICAgbWF0Y2hpbmdTZWN0aW9uLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cbiIsImltcG9ydCBJUHJvdmlkZXIgZnJvbSAnLi4vaW50ZXJmYWNlcy9JUHJvdmlkZXInO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQcm92aWRlciBpbXBsZW1lbnRzIElQcm92aWRlciB7XG4gICAgcHVibGljIGhhbmRsZTogc3RyaW5nO1xuICAgIHB1YmxpYyBuYW1lOiBzdHJpbmc7XG4gICAgcHVibGljIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihvcHRzOiBJUHJvdmlkZXIpIHtcbiAgICAgICAgdGhpcy5oYW5kbGUgPSBvcHRzLmhhbmRsZTtcbiAgICAgICAgdGhpcy5uYW1lID0gb3B0cy5uYW1lO1xuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gb3B0cy5kZXNjcmlwdGlvbjtcbiAgICB9XG59XG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P2VtYmVkZGVkIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vYWRtaW4uc2Nzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P2VtYmVkZGVkIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vYWRtaW4uc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9lbWJlZGRlZCEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL2FkbWluLnNjc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iXSwic291cmNlUm9vdCI6IiJ9