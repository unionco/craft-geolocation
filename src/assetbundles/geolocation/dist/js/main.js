!function(e){function t(t){for(var r,i,a=t[0],c=t[1],l=t[2],d=0,p=[];d<a.length;d++)i=a[d],n[i]&&p.push(n[i][0]),n[i]=0;for(r in c)Object.prototype.hasOwnProperty.call(c,r)&&(e[r]=c[r]);for(u&&u(t);p.length;)p.shift()();return o.push.apply(o,l||[]),s()}function s(){for(var e,t=0;t<o.length;t++){for(var s=o[t],r=!0,a=1;a<s.length;a++){var c=s[a];0!==n[c]&&(r=!1)}r&&(o.splice(t--,1),e=i(i.s=s[0]))}return e}var r={},n={main:0},o=[];function i(t){if(r[t])return r[t].exports;var s=r[t]={i:t,l:!1,exports:{}};return e[t].call(s.exports,s,s.exports,i),s.l=!0,s.exports}i.m=e,i.c=r,i.d=function(e,t,s){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(s,r,function(t){return e[t]}.bind(null,r));return s},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="";var a=window.webpackJsonp=window.webpackJsonp||[],c=a.push.bind(a);a.push=t,a=a.slice();for(var l=0;l<a.length;l++)t(a[l]);var u=c;o.push([0,"vendor"]),s()}({"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/index.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/lib/loader.js!./resources/scss/admin.scss":
/*!********************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader!./node_modules/postcss-loader/src??embedded!./node_modules/sass-loader/lib/loader.js!./resources/scss/admin.scss ***!
  \********************************************************************************************************************************************************************************************************/
/*! no static exports found */function(e,t,s){},"./resources/js/admin.ts":
/*!*******************************!*\
  !*** ./resources/js/admin.ts ***!
  \*******************************/
/*! no exports provided */function(e,t,s){"use strict";s.r(t);var r=s(/*! ./components/ProviderSelect */"./resources/js/components/ProviderSelect.ts"),n=s(/*! ./components/MapBoxMap */"./resources/js/components/MapBoxMap.ts");new(function(){return function(){var e=document.querySelector("[data-provider-select]");e&&(this.providerSelect=new r.default(e));var t=document.querySelectorAll("[data-map-provider]");t&&t.length&&t.forEach(function(e){"mapbox"===e.dataset.mapProvider&&new n.default(e)})}}()),console.log(document.querySelector("[data-map-provider]"))},"./resources/js/components/MapBoxMap.ts":
/*!**********************************************!*\
  !*** ./resources/js/components/MapBoxMap.ts ***!
  \**********************************************/
/*! exports provided: default */function(e,t,s){"use strict";s.r(t);var r=s(/*! mapbox-gl */"./node_modules/mapbox-gl/dist/mapbox-gl.js"),n=s.n(r),o=s(/*! @mapbox/mapbox-gl-geocoder */"./node_modules/@mapbox/mapbox-gl-geocoder/lib/index.js"),i=s.n(o),a=(s(/*! mapbox-gl/src/css/mapbox-gl.css */"./node_modules/mapbox-gl/src/css/mapbox-gl.css"),function(){function e(e){this.container=e,this.apiKey=e.dataset.mapApiKey,this.prefix=e.dataset.fieldPrefix;var t=e.parentElement;this.latInput=t.querySelector('input[name*="lat"]'),this.lngInput=t.querySelector('input[name*="lng"]'),this.initMap=this.initMap.bind(this),this.initGeocoder=this.initGeocoder.bind(this),this.initMap(),console.log(this)}return e.prototype.initMap=function(){var e=this,t=0,s=0;this.latInput&&(t=parseFloat(this.latInput.value)),this.lngInput&&(s=parseFloat(this.lngInput.value)),n.a.accessToken=this.apiKey,this.map=new r.Map({container:this.container,style:"mapbox://styles/mapbox/streets-v11",center:[s,t],zoom:13}),this.map.on("click",function(t){var s=t.lngLat,r=s.lng,n=s.lat;e.latInput&&e.lngInput&&(e.latInput.value=n.toString(),e.lngInput.value=r.toString())}),this.initGeocoder()},e.prototype.initGeocoder=function(){var e=new i.a({accessToken:this.apiKey,marker:{color:"orange"},mapboxgl:n.a,origin:"https://api.mapbox.com"});this.map.addControl(e)},e}());t.default=a},"./resources/js/components/ProviderSelect.ts":
/*!***************************************************!*\
  !*** ./resources/js/components/ProviderSelect.ts ***!
  \***************************************************/
/*! exports provided: default */function(e,t,s){"use strict";s.r(t);var r=s(/*! ../models/Provider */"./resources/js/models/Provider.ts"),n=function(){function e(t){if(this.section=t,this.select=document.querySelector("#settings-providerSelect"),this.select){var s=this.section.dataset.providers;this.providers=e.parseProviders(s),this.handleProviderChange=this.handleProviderChange.bind(this),this.setActive=this.setActive.bind(this),this.select.addEventListener("change",this.handleProviderChange),this.setActive(this.select.value)}}return e.parseProviders=function(e){var t=JSON.parse(e);return Object.values(t).map(function(e){return new r.default(e)})},e.prototype.handleProviderChange=function(e){var t=e.target;this.setActive(t.value)},e.prototype.setActive=function(e){var t=this.providers.find(function(t){return t.handle===e});if(!t)return!1;var s=this.section.querySelector('[data-provider="'+t.handle+'"]');return!!s&&(this.section.querySelectorAll("[data-provider]").forEach(function(e){return e.classList.remove("active")}),s.classList.add("active"),!0)},e}();t.default=n},"./resources/js/models/Provider.ts":
/*!*****************************************!*\
  !*** ./resources/js/models/Provider.ts ***!
  \*****************************************/
/*! exports provided: default */function(e,t,s){"use strict";s.r(t);var r=function(){return function(e){this.handle=e.handle,this.name=e.name,this.description=e.description}}();t.default=r},"./resources/scss/admin.scss":
/*!***********************************!*\
  !*** ./resources/scss/admin.scss ***!
  \***********************************/
/*! no static exports found */function(e,t,s){var r=s(/*! !../../node_modules/mini-css-extract-plugin/dist/loader.js!../../node_modules/css-loader!../../node_modules/postcss-loader/src??embedded!../../node_modules/sass-loader/lib/loader.js!./admin.scss */"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/index.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/lib/loader.js!./resources/scss/admin.scss");"string"==typeof r&&(r=[[e.i,r,""]]);var n={hmr:!0,transform:void 0,insertInto:void 0};s(/*! ../../node_modules/style-loader/lib/addStyles.js */"./node_modules/style-loader/lib/addStyles.js")(r,n);r.locals&&(e.exports=r.locals)},0:
/*!*****************************************************************!*\
  !*** multi ./resources/js/admin.ts ./resources/scss/admin.scss ***!
  \*****************************************************************/
/*! no static exports found */function(e,t,s){s(/*! /Users/abryrath/Union/Library/geolocation/resources/js/admin.ts */"./resources/js/admin.ts"),e.exports=s(/*! /Users/abryrath/Union/Library/geolocation/resources/scss/admin.scss */"./resources/scss/admin.scss")}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL2FkbWluLnRzIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL01hcEJveE1hcC50cyIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9Qcm92aWRlclNlbGVjdC50cyIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvbW9kZWxzL1Byb3ZpZGVyLnRzIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9zY3NzL2FkbWluLnNjc3MiXSwibmFtZXMiOlsid2VicGFja0pzb25wQ2FsbGJhY2siLCJkYXRhIiwibW9kdWxlSWQiLCJjaHVua0lkIiwiY2h1bmtJZHMiLCJtb3JlTW9kdWxlcyIsImV4ZWN1dGVNb2R1bGVzIiwiaSIsInJlc29sdmVzIiwibGVuZ3RoIiwiaW5zdGFsbGVkQ2h1bmtzIiwicHVzaCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIm1vZHVsZXMiLCJwYXJlbnRKc29ucEZ1bmN0aW9uIiwic2hpZnQiLCJkZWZlcnJlZE1vZHVsZXMiLCJhcHBseSIsImNoZWNrRGVmZXJyZWRNb2R1bGVzIiwicmVzdWx0IiwiZGVmZXJyZWRNb2R1bGUiLCJmdWxmaWxsZWQiLCJqIiwiZGVwSWQiLCJzcGxpY2UiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwicyIsImluc3RhbGxlZE1vZHVsZXMiLCJtYWluIiwiZXhwb3J0cyIsIm1vZHVsZSIsImwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicCIsImpzb25wQXJyYXkiLCJ3aW5kb3ciLCJvbGRKc29ucEZ1bmN0aW9uIiwic2xpY2UiLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwiX2NvbXBvbmVudHNfUHJvdmlkZXJTZWxlY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIl9jb21wb25lbnRzX01hcEJveE1hcF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwicHJvdmlkZXJTZWxlY3QiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ0aGlzIiwiaW5wdXRNYXBzIiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJjb250YWluZXIiLCJkYXRhc2V0IiwibWFwUHJvdmlkZXIiLCJjb25zb2xlIiwibG9nIiwibWFwYm94X2dsX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJtYXBib3hfZ2xfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0IiwiX21hcGJveF9tYXBib3hfZ2xfZ2VvY29kZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsIl9tYXBib3hfbWFwYm94X2dsX2dlb2NvZGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCIsIk1hcEJveE1hcCIsImFwaUtleSIsIm1hcEFwaUtleSIsInByZWZpeCIsImZpZWxkUHJlZml4IiwicGFyZW50RWxlbWVudCIsImxhdElucHV0IiwibG5nSW5wdXQiLCJpbml0TWFwIiwiaW5pdEdlb2NvZGVyIiwiX3RoaXMiLCJsYXRWYWx1ZSIsImxuZ1ZhbHVlIiwicGFyc2VGbG9hdCIsImEiLCJhY2Nlc3NUb2tlbiIsIm1hcCIsInN0eWxlIiwiY2VudGVyIiwiem9vbSIsIm9uIiwiZSIsIl9hIiwibG5nTGF0IiwibG5nIiwibGF0IiwidG9TdHJpbmciLCJnZW9jb2RlciIsIm1hcmtlciIsImNvbG9yIiwibWFwYm94Z2wiLCJvcmlnaW4iLCJhZGRDb250cm9sIiwiX21vZGVsc19Qcm92aWRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiUHJvdmlkZXJTZWxlY3QiLCJzZWN0aW9uIiwic2VsZWN0IiwicHJvdmlkZXJzSnNvbiIsInByb3ZpZGVycyIsInBhcnNlUHJvdmlkZXJzIiwiaGFuZGxlUHJvdmlkZXJDaGFuZ2UiLCJzZXRBY3RpdmUiLCJhZGRFdmVudExpc3RlbmVyIiwianNvbiIsIkpTT04iLCJwYXJzZSIsInZhbHVlcyIsImV2ZW50IiwidGFyZ2V0IiwiaGFuZGxlIiwibWF0Y2hpbmdQcm92aWRlciIsImZpbmQiLCJwcm92aWRlciIsIm1hdGNoaW5nU2VjdGlvbiIsImNsYXNzTGlzdCIsInJlbW92ZSIsImFkZCIsIlByb3ZpZGVyIiwib3B0cyIsImRlc2NyaXB0aW9uIiwiY29udGVudCIsIm9wdGlvbnMiLCJobXIiLCJ0cmFuc2Zvcm0iLCJpbnNlcnRJbnRvIiwidW5kZWZpbmVkIiwibG9jYWxzIl0sIm1hcHBpbmdzIjoiYUFDQSxTQUFBQSxFQUFBQyxHQVFBLElBUEEsSUFNQUMsRUFBQUMsRUFOQUMsRUFBQUgsRUFBQSxHQUNBSSxFQUFBSixFQUFBLEdBQ0FLLEVBQUFMLEVBQUEsR0FJQU0sRUFBQSxFQUFBQyxFQUFBLEdBQ1FELEVBQUFILEVBQUFLLE9BQW9CRixJQUM1QkosRUFBQUMsRUFBQUcsR0FDQUcsRUFBQVAsSUFDQUssRUFBQUcsS0FBQUQsRUFBQVAsR0FBQSxJQUVBTyxFQUFBUCxHQUFBLEVBRUEsSUFBQUQsS0FBQUcsRUFDQU8sT0FBQUMsVUFBQUMsZUFBQUMsS0FBQVYsRUFBQUgsS0FDQWMsRUFBQWQsR0FBQUcsRUFBQUgsSUFLQSxJQUZBZSxLQUFBaEIsR0FFQU8sRUFBQUMsUUFDQUQsRUFBQVUsT0FBQVYsR0FPQSxPQUhBVyxFQUFBUixLQUFBUyxNQUFBRCxFQUFBYixHQUFBLElBR0FlLElBRUEsU0FBQUEsSUFFQSxJQURBLElBQUFDLEVBQ0FmLEVBQUEsRUFBaUJBLEVBQUFZLEVBQUFWLE9BQTRCRixJQUFBLENBRzdDLElBRkEsSUFBQWdCLEVBQUFKLEVBQUFaLEdBQ0FpQixHQUFBLEVBQ0FDLEVBQUEsRUFBa0JB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LFVBQUE4RyxVQUFSLFNBQWtCUSxHQUNkLElBQU1DLEVBQThCL0QsS0FBS21ELFVBQ3BDYSxLQUFLLFNBQUNDLEdBQWlDLE9BQUFBLEVBQVNILFNBQVdBLElBQ2hFLElBQUtDLEVBQ0QsT0FBTyxFQUdYLElBQU1HLEVBQWtDbEUsS0FBS2dELFFBQ3hDakQsY0FBYyxtQkFBbUJnRSxFQUFpQkQsT0FBTSxNQUM3RCxRQUFLSSxJQUtMbEUsS0FBS2dELFFBQVE5QyxpQkFBaUIsbUJBQ3pCQyxRQUFRLFNBQUM2QyxHQUF5QixPQUFBQSxFQUFRbUIsVUFBVUMsT0FBTyxZQUVoRUYsRUFBZ0JDLFVBQVVFLElBQUksV0FFdkIsSUFFZnRCLEVBN0VBOzs7OzZEQ0RBeEYsRUFBQWdCLEVBQUFtQixHQUFBLElBQUE0RSxFQUFBLFdBVUEsT0FMSSxTQUFZQyxHQUNSdkUsS0FBSzhELE9BQVNTLEVBQUtULE9BQ25COUQsS0FBSy9CLEtBQU9zRyxFQUFLdEcsS0FDakIrQixLQUFLd0UsWUFBY0QsRUFBS0MsYUFSaEM7Ozs7OENDREEsSUFBQUMsRUFBY2xILDJNQUFRLDZNQUV0QixpQkFBQWtILE1BQUEsRUFBNEM3RyxFQUFBMUIsRUFBU3VJLEVBQUEsTUFPckQsSUFBQUMsRUFBQSxDQUFlQyxLQUFBLEVBRWZDLGVBUEFBLEVBUUFDLGdCQUFBQyxHQUVhdkgseURBQVEsK0NBQVJBLENBQTJEa0gsRUFBQUMsR0FFeEVELEVBQUFNLFNBQUFuSCxFQUFBRCxRQUFBOEcsRUFBQU0iLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIGluc3RhbGwgYSBKU09OUCBjYWxsYmFjayBmb3IgY2h1bmsgbG9hZGluZ1xuIFx0ZnVuY3Rpb24gd2VicGFja0pzb25wQ2FsbGJhY2soZGF0YSkge1xuIFx0XHR2YXIgY2h1bmtJZHMgPSBkYXRhWzBdO1xuIFx0XHR2YXIgbW9yZU1vZHVsZXMgPSBkYXRhWzFdO1xuIFx0XHR2YXIgZXhlY3V0ZU1vZHVsZXMgPSBkYXRhWzJdO1xuXG4gXHRcdC8vIGFkZCBcIm1vcmVNb2R1bGVzXCIgdG8gdGhlIG1vZHVsZXMgb2JqZWN0LFxuIFx0XHQvLyB0aGVuIGZsYWcgYWxsIFwiY2h1bmtJZHNcIiBhcyBsb2FkZWQgYW5kIGZpcmUgY2FsbGJhY2tcbiBcdFx0dmFyIG1vZHVsZUlkLCBjaHVua0lkLCBpID0gMCwgcmVzb2x2ZXMgPSBbXTtcbiBcdFx0Zm9yKDtpIDwgY2h1bmtJZHMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRjaHVua0lkID0gY2h1bmtJZHNbaV07XG4gXHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdKSB7XG4gXHRcdFx0XHRyZXNvbHZlcy5wdXNoKGluc3RhbGxlZENodW5rc1tjaHVua0lkXVswXSk7XG4gXHRcdFx0fVxuIFx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IDA7XG4gXHRcdH1cbiBcdFx0Zm9yKG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG4gXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcbiBcdFx0XHRcdG1vZHVsZXNbbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRpZihwYXJlbnRKc29ucEZ1bmN0aW9uKSBwYXJlbnRKc29ucEZ1bmN0aW9uKGRhdGEpO1xuXG4gXHRcdHdoaWxlKHJlc29sdmVzLmxlbmd0aCkge1xuIFx0XHRcdHJlc29sdmVzLnNoaWZ0KCkoKTtcbiBcdFx0fVxuXG4gXHRcdC8vIGFkZCBlbnRyeSBtb2R1bGVzIGZyb20gbG9hZGVkIGNodW5rIHRvIGRlZmVycmVkIGxpc3RcbiBcdFx0ZGVmZXJyZWRNb2R1bGVzLnB1c2guYXBwbHkoZGVmZXJyZWRNb2R1bGVzLCBleGVjdXRlTW9kdWxlcyB8fCBbXSk7XG5cbiBcdFx0Ly8gcnVuIGRlZmVycmVkIG1vZHVsZXMgd2hlbiBhbGwgY2h1bmtzIHJlYWR5XG4gXHRcdHJldHVybiBjaGVja0RlZmVycmVkTW9kdWxlcygpO1xuIFx0fTtcbiBcdGZ1bmN0aW9uIGNoZWNrRGVmZXJyZWRNb2R1bGVzKCkge1xuIFx0XHR2YXIgcmVzdWx0O1xuIFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgZGVmZXJyZWRNb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0dmFyIGRlZmVycmVkTW9kdWxlID0gZGVmZXJyZWRNb2R1bGVzW2ldO1xuIFx0XHRcdHZhciBmdWxmaWxsZWQgPSB0cnVlO1xuIFx0XHRcdGZvcih2YXIgaiA9IDE7IGogPCBkZWZlcnJlZE1vZHVsZS5sZW5ndGg7IGorKykge1xuIFx0XHRcdFx0dmFyIGRlcElkID0gZGVmZXJyZWRNb2R1bGVbal07XG4gXHRcdFx0XHRpZihpbnN0YWxsZWRDaHVua3NbZGVwSWRdICE9PSAwKSBmdWxmaWxsZWQgPSBmYWxzZTtcbiBcdFx0XHR9XG4gXHRcdFx0aWYoZnVsZmlsbGVkKSB7XG4gXHRcdFx0XHRkZWZlcnJlZE1vZHVsZXMuc3BsaWNlKGktLSwgMSk7XG4gXHRcdFx0XHRyZXN1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IGRlZmVycmVkTW9kdWxlWzBdKTtcbiBcdFx0XHR9XG4gXHRcdH1cbiBcdFx0cmV0dXJuIHJlc3VsdDtcbiBcdH1cblxuIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3NcbiBcdC8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuIFx0Ly8gUHJvbWlzZSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbiBcdHZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG4gXHRcdFwibWFpblwiOiAwXG4gXHR9O1xuXG4gXHR2YXIgZGVmZXJyZWRNb2R1bGVzID0gW107XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdHZhciBqc29ucEFycmF5ID0gd2luZG93W1wid2VicGFja0pzb25wXCJdID0gd2luZG93W1wid2VicGFja0pzb25wXCJdIHx8IFtdO1xuIFx0dmFyIG9sZEpzb25wRnVuY3Rpb24gPSBqc29ucEFycmF5LnB1c2guYmluZChqc29ucEFycmF5KTtcbiBcdGpzb25wQXJyYXkucHVzaCA9IHdlYnBhY2tKc29ucENhbGxiYWNrO1xuIFx0anNvbnBBcnJheSA9IGpzb25wQXJyYXkuc2xpY2UoKTtcbiBcdGZvcih2YXIgaSA9IDA7IGkgPCBqc29ucEFycmF5Lmxlbmd0aDsgaSsrKSB3ZWJwYWNrSnNvbnBDYWxsYmFjayhqc29ucEFycmF5W2ldKTtcbiBcdHZhciBwYXJlbnRKc29ucEZ1bmN0aW9uID0gb2xkSnNvbnBGdW5jdGlvbjtcblxuXG4gXHQvLyBhZGQgZW50cnkgbW9kdWxlIHRvIGRlZmVycmVkIGxpc3RcbiBcdGRlZmVycmVkTW9kdWxlcy5wdXNoKFswLFwidmVuZG9yXCJdKTtcbiBcdC8vIHJ1biBkZWZlcnJlZCBtb2R1bGVzIHdoZW4gcmVhZHlcbiBcdHJldHVybiBjaGVja0RlZmVycmVkTW9kdWxlcygpO1xuIiwiaW1wb3J0IFByb3ZpZGVyU2VsZWN0IGZyb20gJy4vY29tcG9uZW50cy9Qcm92aWRlclNlbGVjdCc7XG5pbXBvcnQgTWFwQm94TWFwIGZyb20gJy4vY29tcG9uZW50cy9NYXBCb3hNYXAnO1xuXG5jbGFzcyBBZG1pbiB7XG4gICAgcHVibGljIHByb3ZpZGVyU2VsZWN0OiBQcm92aWRlclNlbGVjdDtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBjb25zdCBwcm92aWRlclNlbGVjdDogSFRNTERpdkVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1wcm92aWRlci1zZWxlY3RdJyk7XG4gICAgICAgIGlmIChwcm92aWRlclNlbGVjdCkge1xuICAgICAgICAgICAgdGhpcy5wcm92aWRlclNlbGVjdCA9IG5ldyBQcm92aWRlclNlbGVjdChwcm92aWRlclNlbGVjdCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBpbnB1dE1hcHM6IE5vZGVMaXN0T2Y8SFRNTERpdkVsZW1lbnQ+ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtbWFwLXByb3ZpZGVyXScpO1xuICAgICAgICBpZiAoaW5wdXRNYXBzICYmIGlucHV0TWFwcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlucHV0TWFwcy5mb3JFYWNoKChjb250YWluZXI6IEhUTUxEaXZFbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbnRhaW5lci5kYXRhc2V0Lm1hcFByb3ZpZGVyID09PSAnbWFwYm94Jykge1xuICAgICAgICAgICAgICAgICAgICBuZXcgTWFwQm94TWFwKGNvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbm5ldyBBZG1pbigpO1xuXG5jb25zb2xlLmxvZyhkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1tYXAtcHJvdmlkZXJdJykpOyIsImltcG9ydCBtYXBib3hnbCwgeyBNYXAsIE1hcE1vdXNlRXZlbnQgfSBmcm9tICdtYXBib3gtZ2wnO1xuaW1wb3J0IE1hcGJveEdlb2NvZGVyIGZyb20gJ0BtYXBib3gvbWFwYm94LWdsLWdlb2NvZGVyJztcblxuaW1wb3J0ICdtYXBib3gtZ2wvc3JjL2Nzcy9tYXBib3gtZ2wuY3NzJztcblxuY2xhc3MgTWFwQm94TWFwIHtcbiAgICBwcml2YXRlIGFwaUtleTogc3RyaW5nO1xuICAgIHByaXZhdGUgY29udGFpbmVyOiBIVE1MRGl2RWxlbWVudDtcbiAgICBwdWJsaWMgbWFwOiBNYXA7XG4gICAgcHJpdmF0ZSBwcmVmaXg6IHN0cmluZztcbiAgICBwcml2YXRlIGxhdElucHV0OiBIVE1MSW5wdXRFbGVtZW50O1xuICAgIHByaXZhdGUgbG5nSW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQ7XG5cbiAgICBjb25zdHJ1Y3Rvcihjb250YWluZXI6IEhUTUxEaXZFbGVtZW50KSB7XG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgICAgICB0aGlzLmFwaUtleSA9IGNvbnRhaW5lci5kYXRhc2V0Lm1hcEFwaUtleTtcbiAgICAgICAgdGhpcy5wcmVmaXggPSBjb250YWluZXIuZGF0YXNldC5maWVsZFByZWZpeDtcbiAgICAgICAgY29uc3QgcGFyZW50RWxlbWVudCA9IGNvbnRhaW5lci5wYXJlbnRFbGVtZW50O1xuICAgICAgICB0aGlzLmxhdElucHV0ID0gcGFyZW50RWxlbWVudC5xdWVyeVNlbGVjdG9yKCdpbnB1dFtuYW1lKj1cImxhdFwiXScpO1xuICAgICAgICB0aGlzLmxuZ0lucHV0ID0gcGFyZW50RWxlbWVudC5xdWVyeVNlbGVjdG9yKCdpbnB1dFtuYW1lKj1cImxuZ1wiXScpO1xuICAgICAgICBcbiAgICAgICAgLy8gQmluZGluZ1xuICAgICAgICB0aGlzLmluaXRNYXAgPSB0aGlzLmluaXRNYXAuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5pbml0R2VvY29kZXIgPSB0aGlzLmluaXRHZW9jb2Rlci5iaW5kKHRoaXMpO1xuXG4gICAgICAgIHRoaXMuaW5pdE1hcCgpO1xuICAgICAgICBjb25zb2xlLmxvZyh0aGlzKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgaW5pdE1hcCgpIHtcbiAgICAgICAgbGV0IGxhdFZhbHVlID0gMDtcbiAgICAgICAgbGV0IGxuZ1ZhbHVlID0gMDtcbiAgICAgICAgaWYgKHRoaXMubGF0SW5wdXQpIHtcbiAgICAgICAgICAgIGxhdFZhbHVlID0gcGFyc2VGbG9hdCh0aGlzLmxhdElucHV0LnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5sbmdJbnB1dCkge1xuICAgICAgICAgICAgbG5nVmFsdWUgPSBwYXJzZUZsb2F0KHRoaXMubG5nSW5wdXQudmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIG1hcGJveGdsLmFjY2Vzc1Rva2VuID0gdGhpcy5hcGlLZXk7XG4gICAgICAgIHRoaXMubWFwID0gbmV3IE1hcCh7XG4gICAgICAgICAgICBjb250YWluZXI6IHRoaXMuY29udGFpbmVyLFxuICAgICAgICAgICAgc3R5bGU6ICdtYXBib3g6Ly9zdHlsZXMvbWFwYm94L3N0cmVldHMtdjExJyxcbiAgICAgICAgICAgIGNlbnRlcjogW2xuZ1ZhbHVlLCBsYXRWYWx1ZV0sXG4gICAgICAgICAgICB6b29tOiAxMyxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5tYXAub24oJ2NsaWNrJywgKGU6IE1hcE1vdXNlRXZlbnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgbG5nLCBsYXQgfSA9IGUubG5nTGF0O1xuICAgICAgICAgICAgaWYgKCF0aGlzLmxhdElucHV0IHx8ICF0aGlzLmxuZ0lucHV0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5sYXRJbnB1dC52YWx1ZSA9IGxhdC50b1N0cmluZygpO1xuICAgICAgICAgICAgdGhpcy5sbmdJbnB1dC52YWx1ZSA9IGxuZy50b1N0cmluZygpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmluaXRHZW9jb2RlcigpO1xuICAgIH1cblxuICAgIHB1YmxpYyBpbml0R2VvY29kZXIoKSB7XG4gICAgICAgIGNvbnN0IGdlb2NvZGVyID0gbmV3IE1hcGJveEdlb2NvZGVyKHtcbiAgICAgICAgICAgIGFjY2Vzc1Rva2VuOiB0aGlzLmFwaUtleSxcbiAgICAgICAgICAgIG1hcmtlcjoge1xuICAgICAgICAgICAgICAgIGNvbG9yOiAnb3JhbmdlJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1hcGJveGdsOiBtYXBib3hnbCxcbiAgICAgICAgICAgIG9yaWdpbjogJ2h0dHBzOi8vYXBpLm1hcGJveC5jb20nXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMubWFwLmFkZENvbnRyb2woZ2VvY29kZXIpO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTWFwQm94TWFwOyIsImltcG9ydCBJUHJvdmlkZXIgZnJvbSAnLi4vaW50ZXJmYWNlcy9JUHJvdmlkZXInO1xuaW1wb3J0IFByb3ZpZGVyIGZyb20gJy4uL21vZGVscy9Qcm92aWRlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByb3ZpZGVyU2VsZWN0IHtcbiAgICAvLyBTdGF0aWMgbWV0aG9kc1xuICAgIC8qKlxuICAgICAqIFJldHVybiB0aGUgYXZhaWxhYmxlIHByb3ZpZGVycyBiYXNlZCBvbiB0aGUgSlNPTiBpbnB1dFxuICAgICAqIEBwYXJhbSBqc29uXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBwYXJzZVByb3ZpZGVycyhqc29uOiBzdHJpbmcpOiBJUHJvdmlkZXJbXSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKGpzb24pO1xuICAgICAgICBjb25zdCB2YWx1ZXM6IElQcm92aWRlcltdID0gT2JqZWN0LnZhbHVlcyhkYXRhKTtcbiAgICAgICAgY29uc3QgcHJvdmlkZXJzOiBJUHJvdmlkZXJbXSA9IHZhbHVlcy5tYXAoKHZhbHVlOiBJUHJvdmlkZXIpOiBJUHJvdmlkZXIgPT4gbmV3IFByb3ZpZGVyKHZhbHVlKSk7XG5cbiAgICAgICAgcmV0dXJuIHByb3ZpZGVycztcbiAgICB9XG5cbiAgICAvLyBGaWVsZHNcbiAgICBwdWJsaWMgc2VjdGlvbjogSFRNTERpdkVsZW1lbnQ7XG4gICAgcHVibGljIHNlbGVjdDogSFRNTFNlbGVjdEVsZW1lbnQ7XG4gICAgcHVibGljIGFjdGl2ZTogc3RyaW5nO1xuICAgIHByaXZhdGUgcHJvdmlkZXJzOiBJUHJvdmlkZXJbXTtcblxuICAgIC8vIENvbnN0cnVjdG9yXG4gICAgY29uc3RydWN0b3Ioc2VjdGlvbjogSFRNTERpdkVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5zZWN0aW9uID0gc2VjdGlvbjtcbiAgICAgICAgdGhpcy5zZWxlY3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc2V0dGluZ3MtcHJvdmlkZXJTZWxlY3QnKTtcbiAgICAgICAgaWYgKCF0aGlzLnNlbGVjdCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcHJvdmlkZXJzSnNvbjogc3RyaW5nID0gdGhpcy5zZWN0aW9uLmRhdGFzZXQucHJvdmlkZXJzO1xuICAgICAgICB0aGlzLnByb3ZpZGVycyA9IFByb3ZpZGVyU2VsZWN0LnBhcnNlUHJvdmlkZXJzKHByb3ZpZGVyc0pzb24pO1xuXG4gICAgICAgIC8vIE1ldGhvZCBiaW5kaW5nXG4gICAgICAgIHRoaXMuaGFuZGxlUHJvdmlkZXJDaGFuZ2UgPSB0aGlzLmhhbmRsZVByb3ZpZGVyQ2hhbmdlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuc2V0QWN0aXZlID0gdGhpcy5zZXRBY3RpdmUuYmluZCh0aGlzKTtcblxuICAgICAgICAvLyBFdmVudCBsaXN0ZW5lcnNcbiAgICAgICAgdGhpcy5zZWxlY3QuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGhpcy5oYW5kbGVQcm92aWRlckNoYW5nZSk7XG5cbiAgICAgICAgLy8gSW5pdGlhbGl6ZSBzdGF0ZVxuICAgICAgICB0aGlzLnNldEFjdGl2ZSh0aGlzLnNlbGVjdC52YWx1ZSk7XG4gICAgfVxuXG4gICAgLy8gSW5zdGFuY2UgbWV0aG9kc1xuICAgIC8qKlxuICAgICAqIEhhbmRsZSBjaGFuZ2VzIHRvIHRoZSBwcm92aWRlciBzZWxlY3RcbiAgICAgKiBAcGFyYW0gZXZlbnQgQ2hhbmdlIGV2ZW50IGVtaXR0ZWQgZnJvbSBIVE1MU2VsZWN0RWxlbXRuXG4gICAgICovXG4gICAgcHJpdmF0ZSBoYW5kbGVQcm92aWRlckNoYW5nZShldmVudDogRXZlbnQpIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0OiBIVE1MU2VsZWN0RWxlbWVudCA9IGV2ZW50LnRhcmdldCBhcyBIVE1MU2VsZWN0RWxlbWVudDtcbiAgICAgICAgdGhpcy5zZXRBY3RpdmUodGFyZ2V0LnZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTaG93IHRoZSBhY3RpdmUgc2VjdGlvblxuICAgICAqIEBwYXJhbSBoYW5kbGUgc3RyaW5nIFByb3ZpZGVyIGhhbmRsZVxuICAgICAqL1xuICAgIHByaXZhdGUgc2V0QWN0aXZlKGhhbmRsZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IG1hdGNoaW5nUHJvdmlkZXI6IElQcm92aWRlciA9IHRoaXMucHJvdmlkZXJzXG4gICAgICAgICAgICAuZmluZCgocHJvdmlkZXI6IElQcm92aWRlcik6IGJvb2xlYW4gPT4gcHJvdmlkZXIuaGFuZGxlID09PSBoYW5kbGUpO1xuICAgICAgICBpZiAoIW1hdGNoaW5nUHJvdmlkZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG1hdGNoaW5nU2VjdGlvbjogSFRNTERpdkVsZW1lbnQgPSB0aGlzLnNlY3Rpb25cbiAgICAgICAgICAgIC5xdWVyeVNlbGVjdG9yKGBbZGF0YS1wcm92aWRlcj1cIiR7bWF0Y2hpbmdQcm92aWRlci5oYW5kbGV9XCJdYCk7XG4gICAgICAgIGlmICghbWF0Y2hpbmdTZWN0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGb3VuZCBhIG1hdGNoaW5nIHNlY3Rpb24sIGhpZGUgb3RoZXJzXG4gICAgICAgIHRoaXMuc2VjdGlvbi5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1wcm92aWRlcl0nKVxuICAgICAgICAgICAgLmZvckVhY2goKHNlY3Rpb246IEhUTUxFbGVtZW50KSA9PiBzZWN0aW9uLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpKTtcblxuICAgICAgICBtYXRjaGluZ1NlY3Rpb24uY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufVxuIiwiaW1wb3J0IElQcm92aWRlciBmcm9tICcuLi9pbnRlcmZhY2VzL0lQcm92aWRlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByb3ZpZGVyIGltcGxlbWVudHMgSVByb3ZpZGVyIHtcbiAgICBwdWJsaWMgaGFuZGxlOiBzdHJpbmc7XG4gICAgcHVibGljIG5hbWU6IHN0cmluZztcbiAgICBwdWJsaWMgZGVzY3JpcHRpb246IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKG9wdHM6IElQcm92aWRlcikge1xuICAgICAgICB0aGlzLmhhbmRsZSA9IG9wdHMuaGFuZGxlO1xuICAgICAgICB0aGlzLm5hbWUgPSBvcHRzLm5hbWU7XG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBvcHRzLmRlc2NyaXB0aW9uO1xuICAgIH1cbn1cbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/ZW1iZWRkZWQhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9hZG1pbi5zY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/ZW1iZWRkZWQhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9hZG1pbi5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P2VtYmVkZGVkIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vYWRtaW4uc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSJdLCJzb3VyY2VSb290IjoiIn0=