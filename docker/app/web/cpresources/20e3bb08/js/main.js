!function(e){function t(t){for(var s,i,c=t[0],a=t[1],u=t[2],d=0,h=[];d<c.length;d++)i=c[d],r[i]&&h.push(r[i][0]),r[i]=0;for(s in a)Object.prototype.hasOwnProperty.call(a,s)&&(e[s]=a[s]);for(l&&l(t);h.length;)h.shift()();return o.push.apply(o,u||[]),n()}function n(){for(var e,t=0;t<o.length;t++){for(var n=o[t],s=!0,c=1;c<n.length;c++){var a=n[c];0!==r[a]&&(s=!1)}s&&(o.splice(t--,1),e=i(i.s=n[0]))}return e}var s={},r={main:0},o=[];function i(t){if(s[t])return s[t].exports;var n=s[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=e,i.c=s,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)i.d(n,s,function(t){return e[t]}.bind(null,s));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="";var c=window.webpackJsonp=window.webpackJsonp||[],a=c.push.bind(c);c.push=t,c=c.slice();for(var u=0;u<c.length;u++)t(c[u]);var l=a;o.push([0,"vendor"]),n()}({"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/index.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/lib/loader.js!./resources/scss/field.scss":
/*!********************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader!./node_modules/postcss-loader/src??embedded!./node_modules/sass-loader/lib/loader.js!./resources/scss/field.scss ***!
  \********************************************************************************************************************************************************************************************************/
/*! no static exports found */function(e,t,n){},"./resources/js/RelatedEntryTypesField.ts":
/*!************************************************!*\
  !*** ./resources/js/RelatedEntryTypesField.ts ***!
  \************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var s=n(/*! ./components/ChannelGroup */"./resources/js/components/ChannelGroup.ts"),r=n(/*! ./components/EntryTypeGroup */"./resources/js/components/EntryTypeGroup.ts"),o=function(){function e(){var e=this;this.activeSections=[],this.fieldContainer=document.querySelector("#types-unionco-relatedentrytypes-fields-RelatedEntryType-sources-field");var t=document.querySelector("[data-related-entry-types-channels]");if(t){this.channelGroup=new s.default(t),this.activeSections=this.channelGroup.getActiveChannels();var n=JSON.parse(t.dataset.relatedEntryTypesChannels);this.sectionMap=n}var o=this.fieldContainer.querySelector("[data-entry-types-select-area]");o&&(this.entryTypeGroup=new r.default(o)),this.updateActiveSections=this.updateActiveSections.bind(this),this.fieldContainer.addEventListener("channelChange",function(t){var n=t.detail,s=n.all,r=n.active;console.log(n),e.updateActiveSections(s,r)}),console.log(this)}return e.prototype.updateActiveSections=function(e,t){this.activeSections=e?t?this.channelGroup.getChannels():[]:this.channelGroup.getActiveChannels(),console.log(this.activeSections)},e.fetchTemplates=function(e,t){var n={credentials:"same-origin",headers:{"X-Requested-With":"XMLHttpRequest"},method:"post",body:JSON.stringify({sectionUids:e,entryTypes:t})};return console.log(n),fetch("/admin/related-entry-types/types",n)},e}();t.default=o,new o},"./resources/js/components/AllChannel.ts":
/*!***********************************************!*\
  !*** ./resources/js/components/AllChannel.ts ***!
  \***********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var s,r=n(/*! ./Channel */"./resources/js/components/Channel.ts"),o=(s=function(e,t){return(s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}s(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=function(e){function t(t){return e.call(this,t)||this}return o(t,e),t.prototype.checkboxChangeHandler=function(e){var t=e.target;this.active=t.checked;var n=new CustomEvent("channelChange",{detail:{sectionUid:this.uid,active:this.active,all:!0},bubbles:!0});return this.checkbox.dispatchEvent(n)},t}(r.default);t.default=i},"./resources/js/components/Channel.ts":
/*!********************************************!*\
  !*** ./resources/js/components/Channel.ts ***!
  \********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var s=function(){function e(e){this.checkbox=e,this.active=e.checked;var t=e.value.match(/section\:(.*)/);t&&t.length&&(this.uid=t[0]),this.name=e.value;var n=document.querySelector('label[for="'+this.checkbox.id+'"]');n&&(this.label=n.innerText),this.checkboxChangeHandler=this.checkboxChangeHandler.bind(this),this.updateActiveStatus=this.updateActiveStatus.bind(this),this.checkbox.addEventListener("change",this.checkboxChangeHandler)}return e.prototype.updateActiveStatus=function(){this.active=this.checkbox.checked},e.prototype.checkboxChangeHandler=function(e){var t=e.target;this.active=t.checked;var n=new CustomEvent("channelChange",{detail:{sectionUid:this.uid,active:this.active,all:!1},bubbles:!0});return this.checkbox.dispatchEvent(n)},e}();t.default=s},"./resources/js/components/ChannelGroup.ts":
/*!*************************************************!*\
  !*** ./resources/js/components/ChannelGroup.ts ***!
  \*************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var s=n(/*! ./Channel */"./resources/js/components/Channel.ts"),r=n(/*! ./AllChannel */"./resources/js/components/AllChannel.ts"),o=function(){function e(e){this.node=e;var t=e.querySelectorAll('input[type="checkbox"]');this.channels=Array.from(t).map(function(e){return"*"===e.value?new r.default(e):new s.default(e)}),this.getActiveChannels=this.getActiveChannels.bind(this)}return e.prototype.getChannels=function(){return this.channels},e.prototype.getActiveChannels=function(){return this.channels.filter(function(e){return e.updateActiveStatus(),e.active})},e}();t.default=o},"./resources/js/components/EntryTypeGroup.ts":
/*!***************************************************!*\
  !*** ./resources/js/components/EntryTypeGroup.ts ***!
  \***************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var s=function(){function e(e){this.node=e}return e.prototype.render=function(){this.node.innerHTML="Hello, world"},e.prototype.setEntryTypes=function(e){this.entryTypes=e},e}();t.default=s},"./resources/scss/field.scss":
/*!***********************************!*\
  !*** ./resources/scss/field.scss ***!
  \***********************************/
/*! no static exports found */function(e,t,n){var s=n(/*! !../../node_modules/mini-css-extract-plugin/dist/loader.js!../../node_modules/css-loader!../../node_modules/postcss-loader/src??embedded!../../node_modules/sass-loader/lib/loader.js!./field.scss */"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/index.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/lib/loader.js!./resources/scss/field.scss");"string"==typeof s&&(s=[[e.i,s,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(/*! ../../node_modules/style-loader/lib/addStyles.js */"./node_modules/style-loader/lib/addStyles.js")(s,r);s.locals&&(e.exports=s.locals)},0:
/*!**********************************************************************************!*\
  !*** multi ./resources/js/RelatedEntryTypesField.ts ./resources/scss/field.scss ***!
  \**********************************************************************************/
/*! no static exports found */function(e,t,n){n(/*! /Users/abryrath/Union/Library/relatedentrytypes/resources/js/RelatedEntryTypesField.ts */"./resources/js/RelatedEntryTypesField.ts"),e.exports=n(/*! /Users/abryrath/Union/Library/relatedentrytypes/resources/scss/field.scss */"./resources/scss/field.scss")}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL1JlbGF0ZWRFbnRyeVR5cGVzRmllbGQudHMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvQWxsQ2hhbm5lbC50cyIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9DaGFubmVsLnRzIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL0NoYW5uZWxHcm91cC50cyIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9FbnRyeVR5cGVHcm91cC50cyIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvc2Nzcy9maWVsZC5zY3NzIl0sIm5hbWVzIjpbIndlYnBhY2tKc29ucENhbGxiYWNrIiwiZGF0YSIsIm1vZHVsZUlkIiwiY2h1bmtJZCIsImNodW5rSWRzIiwibW9yZU1vZHVsZXMiLCJleGVjdXRlTW9kdWxlcyIsImkiLCJyZXNvbHZlcyIsImxlbmd0aCIsImluc3RhbGxlZENodW5rcyIsInB1c2giLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJtb2R1bGVzIiwicGFyZW50SnNvbnBGdW5jdGlvbiIsInNoaWZ0IiwiZGVmZXJyZWRNb2R1bGVzIiwiYXBwbHkiLCJjaGVja0RlZmVycmVkTW9kdWxlcyIsInJlc3VsdCIsImRlZmVycmVkTW9kdWxlIiwiZnVsZmlsbGVkIiwiaiIsImRlcElkIiwic3BsaWNlIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsInMiLCJpbnN0YWxsZWRNb2R1bGVzIiwibWFpbiIsImV4cG9ydHMiLCJtb2R1bGUiLCJsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInAiLCJqc29ucEFycmF5Iiwid2luZG93Iiwib2xkSnNvbnBGdW5jdGlvbiIsInNsaWNlIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsIl9jb21wb25lbnRzX0NoYW5uZWxHcm91cF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiX2NvbXBvbmVudHNfRW50cnlUeXBlR3JvdXBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsIlJlbGF0ZWRFbnRyeVR5cGVzRmllbGQiLCJfdGhpcyIsInRoaXMiLCJhY3RpdmVTZWN0aW9ucyIsImZpZWxkQ29udGFpbmVyIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiY2hhbm5lbEdyb3VwQ29udGFpbmVyIiwiY2hhbm5lbEdyb3VwIiwiZ2V0QWN0aXZlQ2hhbm5lbHMiLCJzZWN0aW9uTWFwRGF0YSIsIkpTT04iLCJwYXJzZSIsImRhdGFzZXQiLCJyZWxhdGVkRW50cnlUeXBlc0NoYW5uZWxzIiwic2VjdGlvbk1hcCIsImVudHJ5VHlwZXNHcm91cENvbnRhaW5lciIsImVudHJ5VHlwZUdyb3VwIiwidXBkYXRlQWN0aXZlU2VjdGlvbnMiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsImV2ZW50RGV0YWlsIiwiZGV0YWlsIiwiYWxsIiwiYWN0aXZlIiwiY29uc29sZSIsImxvZyIsImdldENoYW5uZWxzIiwiZmV0Y2hUZW1wbGF0ZXMiLCJzZWN0aW9uVWlkcyIsImVudHJ5VHlwZXMiLCJvcHRzIiwiY3JlZGVudGlhbHMiLCJoZWFkZXJzIiwiWC1SZXF1ZXN0ZWQtV2l0aCIsIm1ldGhvZCIsImJvZHkiLCJzdHJpbmdpZnkiLCJmZXRjaCIsIkFsbENoYW5uZWwiLCJfc3VwZXIiLCJub2RlIiwiX19leHRlbmRzIiwiY2hlY2tib3hDaGFuZ2VIYW5kbGVyIiwiY2hhbmdlRXZlbnQiLCJ0YXJnZXQiLCJjaGVja2VkIiwiZXZlbnQiLCJDdXN0b21FdmVudCIsInNlY3Rpb25VaWQiLCJ1aWQiLCJidWJibGVzIiwiY2hlY2tib3giLCJkaXNwYXRjaEV2ZW50IiwiX0NoYW5uZWxfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIkNoYW5uZWwiLCJ1aWRNYXRjaCIsIm1hdGNoIiwibGFiZWwiLCJpZCIsImlubmVyVGV4dCIsInVwZGF0ZUFjdGl2ZVN0YXR1cyIsIl9BbGxDaGFubmVsX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJDaGFubmVsR3JvdXAiLCJjaGVja2JveGVzIiwicXVlcnlTZWxlY3RvckFsbCIsImNoYW5uZWxzIiwiQXJyYXkiLCJmcm9tIiwibWFwIiwiZmlsdGVyIiwiY2hhbm5lbCIsIkVudHJ5VHlwZUdyb3VwIiwicmVuZGVyIiwiaW5uZXJIVE1MIiwic2V0RW50cnlUeXBlcyIsImNvbnRlbnQiLCJvcHRpb25zIiwiaG1yIiwidHJhbnNmb3JtIiwiaW5zZXJ0SW50byIsInVuZGVmaW5lZCIsImxvY2FscyJdLCJtYXBwaW5ncyI6ImFBQ0EsU0FBQUEsRUFBQUMsR0FRQSxJQVBBLElBTUFDLEVBQUFDLEVBTkFDLEVBQUFILEVBQUEsR0FDQUksRUFBQUosRUFBQSxHQUNBSyxFQUFBTCxFQUFBLEdBSUFNLEVBQUEsRUFBQUMsRUFBQSxHQUNRRCxFQUFBSCxFQUFBSyxPQUFvQkYsSUFDNUJKLEVBQUFDLEVBQUFHLEdBQ0FHLEVBQUFQLElBQ0FLLEVBQUFHLEtBQUFELEVBQUFQLEdBQUEsSUFFQU8sRUFBQVAsR0FBQSxFQUVBLElBQUFELEtBQUFHLEVBQ0FPLE9BQUFDLFVBQUFDLGVBQUFDLEtBQUFWLEVBQUFILEtBQ0FjLEVBQUFkLEdBQUFHLEVBQUFILElBS0EsSUFGQWUsS0FBQWhCLEdBRUFPLEVBQUFDLFFBQ0FELEVBQUFVLE9BQUFWLEdBT0EsT0FIQVcsRUFBQVIsS0FBQVMsTUFBQUQsRUFBQWIsR0FBQSxJQUdBZSxJQUVBLFNBQUFBLElBRUEsSUFEQSxJQUFBQyxFQUNBZixFQUFBLEVBQWlCQSxFQUFBWSxFQUFBVixPQUE0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QUEyRGtILEVBQUFDLEdBRXhFRCxFQUFBTSxTQUFBbkgsRUFBQUQsUUFBQThHLEVBQUFNIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBpbnN0YWxsIGEgSlNPTlAgY2FsbGJhY2sgZm9yIGNodW5rIGxvYWRpbmdcbiBcdGZ1bmN0aW9uIHdlYnBhY2tKc29ucENhbGxiYWNrKGRhdGEpIHtcbiBcdFx0dmFyIGNodW5rSWRzID0gZGF0YVswXTtcbiBcdFx0dmFyIG1vcmVNb2R1bGVzID0gZGF0YVsxXTtcbiBcdFx0dmFyIGV4ZWN1dGVNb2R1bGVzID0gZGF0YVsyXTtcblxuIFx0XHQvLyBhZGQgXCJtb3JlTW9kdWxlc1wiIHRvIHRoZSBtb2R1bGVzIG9iamVjdCxcbiBcdFx0Ly8gdGhlbiBmbGFnIGFsbCBcImNodW5rSWRzXCIgYXMgbG9hZGVkIGFuZCBmaXJlIGNhbGxiYWNrXG4gXHRcdHZhciBtb2R1bGVJZCwgY2h1bmtJZCwgaSA9IDAsIHJlc29sdmVzID0gW107XG4gXHRcdGZvcig7aSA8IGNodW5rSWRzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0Y2h1bmtJZCA9IGNodW5rSWRzW2ldO1xuIFx0XHRcdGlmKGluc3RhbGxlZENodW5rc1tjaHVua0lkXSkge1xuIFx0XHRcdFx0cmVzb2x2ZXMucHVzaChpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF1bMF0pO1xuIFx0XHRcdH1cbiBcdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAwO1xuIFx0XHR9XG4gXHRcdGZvcihtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuIFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG4gXHRcdFx0XHRtb2R1bGVzW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHR9XG4gXHRcdH1cbiBcdFx0aWYocGFyZW50SnNvbnBGdW5jdGlvbikgcGFyZW50SnNvbnBGdW5jdGlvbihkYXRhKTtcblxuIFx0XHR3aGlsZShyZXNvbHZlcy5sZW5ndGgpIHtcbiBcdFx0XHRyZXNvbHZlcy5zaGlmdCgpKCk7XG4gXHRcdH1cblxuIFx0XHQvLyBhZGQgZW50cnkgbW9kdWxlcyBmcm9tIGxvYWRlZCBjaHVuayB0byBkZWZlcnJlZCBsaXN0XG4gXHRcdGRlZmVycmVkTW9kdWxlcy5wdXNoLmFwcGx5KGRlZmVycmVkTW9kdWxlcywgZXhlY3V0ZU1vZHVsZXMgfHwgW10pO1xuXG4gXHRcdC8vIHJ1biBkZWZlcnJlZCBtb2R1bGVzIHdoZW4gYWxsIGNodW5rcyByZWFkeVxuIFx0XHRyZXR1cm4gY2hlY2tEZWZlcnJlZE1vZHVsZXMoKTtcbiBcdH07XG4gXHRmdW5jdGlvbiBjaGVja0RlZmVycmVkTW9kdWxlcygpIHtcbiBcdFx0dmFyIHJlc3VsdDtcbiBcdFx0Zm9yKHZhciBpID0gMDsgaSA8IGRlZmVycmVkTW9kdWxlcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdHZhciBkZWZlcnJlZE1vZHVsZSA9IGRlZmVycmVkTW9kdWxlc1tpXTtcbiBcdFx0XHR2YXIgZnVsZmlsbGVkID0gdHJ1ZTtcbiBcdFx0XHRmb3IodmFyIGogPSAxOyBqIDwgZGVmZXJyZWRNb2R1bGUubGVuZ3RoOyBqKyspIHtcbiBcdFx0XHRcdHZhciBkZXBJZCA9IGRlZmVycmVkTW9kdWxlW2pdO1xuIFx0XHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtzW2RlcElkXSAhPT0gMCkgZnVsZmlsbGVkID0gZmFsc2U7XG4gXHRcdFx0fVxuIFx0XHRcdGlmKGZ1bGZpbGxlZCkge1xuIFx0XHRcdFx0ZGVmZXJyZWRNb2R1bGVzLnNwbGljZShpLS0sIDEpO1xuIFx0XHRcdFx0cmVzdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSBkZWZlcnJlZE1vZHVsZVswXSk7XG4gXHRcdFx0fVxuIFx0XHR9XG4gXHRcdHJldHVybiByZXN1bHQ7XG4gXHR9XG5cbiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4gXHQvLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbiBcdC8vIFByb21pc2UgPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG4gXHR2YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuIFx0XHRcIm1haW5cIjogMFxuIFx0fTtcblxuIFx0dmFyIGRlZmVycmVkTW9kdWxlcyA9IFtdO1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHR2YXIganNvbnBBcnJheSA9IHdpbmRvd1tcIndlYnBhY2tKc29ucFwiXSA9IHdpbmRvd1tcIndlYnBhY2tKc29ucFwiXSB8fCBbXTtcbiBcdHZhciBvbGRKc29ucEZ1bmN0aW9uID0ganNvbnBBcnJheS5wdXNoLmJpbmQoanNvbnBBcnJheSk7XG4gXHRqc29ucEFycmF5LnB1c2ggPSB3ZWJwYWNrSnNvbnBDYWxsYmFjaztcbiBcdGpzb25wQXJyYXkgPSBqc29ucEFycmF5LnNsaWNlKCk7XG4gXHRmb3IodmFyIGkgPSAwOyBpIDwganNvbnBBcnJheS5sZW5ndGg7IGkrKykgd2VicGFja0pzb25wQ2FsbGJhY2soanNvbnBBcnJheVtpXSk7XG4gXHR2YXIgcGFyZW50SnNvbnBGdW5jdGlvbiA9IG9sZEpzb25wRnVuY3Rpb247XG5cblxuIFx0Ly8gYWRkIGVudHJ5IG1vZHVsZSB0byBkZWZlcnJlZCBsaXN0XG4gXHRkZWZlcnJlZE1vZHVsZXMucHVzaChbMCxcInZlbmRvclwiXSk7XG4gXHQvLyBydW4gZGVmZXJyZWQgbW9kdWxlcyB3aGVuIHJlYWR5XG4gXHRyZXR1cm4gY2hlY2tEZWZlcnJlZE1vZHVsZXMoKTtcbiIsImltcG9ydCBJQ2hhbm5lbEdyb3VwIGZyb20gJy4vaW50ZXJmYWNlcy9JQ2hhbm5lbEdyb3VwJztcbmltcG9ydCBDaGFubmVsR3JvdXAgZnJvbSAnLi9jb21wb25lbnRzL0NoYW5uZWxHcm91cCc7XG5pbXBvcnQgSVNlY3Rpb25NYXAgZnJvbSAnLi9pbnRlcmZhY2VzL0lTZWN0aW9uTWFwJztcbmltcG9ydCBJQ2hhbm5lbCBmcm9tICcuL2ludGVyZmFjZXMvSUNoYW5uZWwnO1xuaW1wb3J0IFNlY3Rpb25NYXAgZnJvbSAnLi9jb21wb25lbnRzL1NlY3Rpb25NYXAnO1xuaW1wb3J0IEVudHJ5VHlwZUdyb3VwIGZyb20gJy4vY29tcG9uZW50cy9FbnRyeVR5cGVHcm91cCc7XG5pbXBvcnQgSUVudHJ5VHlwZUdyb3VwIGZyb20gJy4vaW50ZXJmYWNlcy9JRW50cnlUeXBlR3JvdXAnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZWxhdGVkRW50cnlUeXBlc0ZpZWxkIHtcbiAgICBwdWJsaWMgY2hhbm5lbEdyb3VwOiBJQ2hhbm5lbEdyb3VwO1xuICAgIHB1YmxpYyBmaWVsZENvbnRhaW5lcjogSFRNTERpdkVsZW1lbnQ7XG4gICAgcHVibGljIGVudHJ5VHlwZUdyb3VwOiBJRW50cnlUeXBlR3JvdXA7XG4gICAgcHJpdmF0ZSBzZWN0aW9uTWFwOiBJU2VjdGlvbk1hcDtcbiAgICBwdWJsaWMgYWN0aXZlU2VjdGlvbnM6IElDaGFubmVsW107XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5hY3RpdmVTZWN0aW9ucyA9IFtdO1xuICAgICAgICB0aGlzLmZpZWxkQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3R5cGVzLXVuaW9uY28tcmVsYXRlZGVudHJ5dHlwZXMtZmllbGRzLVJlbGF0ZWRFbnRyeVR5cGUtc291cmNlcy1maWVsZCcpO1xuXG4gICAgICAgIC8vIEluaXRpYWxpemUgdGhlIGNoYW5uZWxzIHNlbGVjdCBhcmVhXG4gICAgICAgIGNvbnN0IGNoYW5uZWxHcm91cENvbnRhaW5lcjogSFRNTERpdkVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1yZWxhdGVkLWVudHJ5LXR5cGVzLWNoYW5uZWxzXScpO1xuICAgICAgICBpZiAoY2hhbm5lbEdyb3VwQ29udGFpbmVyKSB7XG4gICAgICAgICAgICB0aGlzLmNoYW5uZWxHcm91cCA9IG5ldyBDaGFubmVsR3JvdXAoY2hhbm5lbEdyb3VwQ29udGFpbmVyKTtcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlU2VjdGlvbnMgPSB0aGlzLmNoYW5uZWxHcm91cC5nZXRBY3RpdmVDaGFubmVscygpOyAvLy5tYXAoKGNoYW5uZWw6IElDaGFubmVsKSA9PiBjaGFubmVsLnVpZCk7XG4gICAgICAgICAgICBjb25zdCBzZWN0aW9uTWFwRGF0YTogSVNlY3Rpb25NYXAgPSBKU09OLnBhcnNlKGNoYW5uZWxHcm91cENvbnRhaW5lci5kYXRhc2V0LnJlbGF0ZWRFbnRyeVR5cGVzQ2hhbm5lbHMpO1xuICAgICAgICAgICAgdGhpcy5zZWN0aW9uTWFwID0gc2VjdGlvbk1hcERhdGE7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBlbnRyeVR5cGVzR3JvdXBDb250YWluZXI6IEhUTUxEaXZFbGVtZW50ID0gdGhpcy5maWVsZENvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCdbZGF0YS1lbnRyeS10eXBlcy1zZWxlY3QtYXJlYV0nKTtcbiAgICAgICAgaWYgKGVudHJ5VHlwZXNHcm91cENvbnRhaW5lcikge1xuICAgICAgICAgICAgdGhpcy5lbnRyeVR5cGVHcm91cCA9IG5ldyBFbnRyeVR5cGVHcm91cChlbnRyeVR5cGVzR3JvdXBDb250YWluZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gTWV0aG9kIGJpbmRpbmdcbiAgICAgICAgdGhpcy51cGRhdGVBY3RpdmVTZWN0aW9ucyA9IHRoaXMudXBkYXRlQWN0aXZlU2VjdGlvbnMuYmluZCh0aGlzKTtcblxuICAgICAgICAvLyBFdmVudCBMaXN0ZW5lcnNcbiAgICAgICAgdGhpcy5maWVsZENvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCdjaGFubmVsQ2hhbmdlJywgKGU6IEN1c3RvbUV2ZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBldmVudERldGFpbCA9IGUuZGV0YWlsO1xuICAgICAgICAgICAgY29uc3QgeyBhbGwsIGFjdGl2ZSB9ID0gZXZlbnREZXRhaWw7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhldmVudERldGFpbCk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUFjdGl2ZVNlY3Rpb25zKGFsbCwgYWN0aXZlKTsgLy8gc2VjdGlvblVpZCwgYWN0aXZlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc29sZS5sb2codGhpcyk7XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgdXBkYXRlQWN0aXZlU2VjdGlvbnMoYWxsOiBib29sZWFuLCBhY3RpdmU6IGJvb2xlYW4pIHtcbiAgICAgICAgaWYgKGFsbCkge1xuICAgICAgICAgICAgaWYgKGFjdGl2ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlU2VjdGlvbnMgPSB0aGlzLmNoYW5uZWxHcm91cC5nZXRDaGFubmVscygpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZVNlY3Rpb25zID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFjdGl2ZVNlY3Rpb25zID0gdGhpcy5jaGFubmVsR3JvdXAuZ2V0QWN0aXZlQ2hhbm5lbHMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMuYWN0aXZlU2VjdGlvbnMpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgZmV0Y2hUZW1wbGF0ZXMoc2VjdGlvblVpZHM6IHN0cmluZ1tdLCBlbnRyeVR5cGVzOiBzdHJpbmdbXSk6IFByb21pc2U8UmVzcG9uc2U+IHtcbiAgICAgICAgY29uc3Qgb3B0czogUmVxdWVzdEluaXQgPSB7XG4gICAgICAgICAgICBjcmVkZW50aWFsczogJ3NhbWUtb3JpZ2luJyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAnWC1SZXF1ZXN0ZWQtV2l0aCc6ICdYTUxIdHRwUmVxdWVzdCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWV0aG9kOiAncG9zdCcsXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgXCJzZWN0aW9uVWlkc1wiOiBzZWN0aW9uVWlkcyxcbiAgICAgICAgICAgICAgICBcImVudHJ5VHlwZXNcIjogZW50cnlUeXBlc1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfTtcbiAgICAgICAgY29uc29sZS5sb2cob3B0cyk7XG4gICAgICAgIHJldHVybiBmZXRjaCgnL2FkbWluL3JlbGF0ZWQtZW50cnktdHlwZXMvdHlwZXMnLCBvcHRzKTtcbiAgICAgICAgLy8gLnRoZW4ocmVzcCA9PnogcmVzcC50ZXh0KCkpXG4gICAgICAgIC8vIC50aGVuKGRhdGEgPT4gcmVzb2x2ZShkYXRhKSk7XG4gICAgfVxufVxuXG5uZXcgUmVsYXRlZEVudHJ5VHlwZXNGaWVsZCgpO1xuXG4vLyBjb25zdCBhamF4T3B0cyA9IHtcbi8vICAgICBjcmVkZW50aWFsczogJ3NhbWUtb3JpZ2luJyxcbi8vICAgICBoZWFkZXJzOiB7XG4vLyAgICAgICAgICdYLVJlcXVlc3RlZC1XaXRoJzogJ1hNTEh0dHBSZXF1ZXN0Jyxcbi8vICAgICB9XG4vLyB9O1xuXG4vLyBjbGFzcyBFbnRyeVR5cGUge1xuLy8gICAgIGNvbnN0cnVjdG9yKCkge1xuLy8gICAgICAgICB0aGlzLmZpZWxkQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3R5cGVzLXVuaW9uY28tcmVsYXRlZGVudHJ5dHlwZXMtZmllbGRzLUVudHJ5VHlwZS1zb3VyY2VzLWZpZWxkJyk7XG4vLyAgICAgICAgIGlmICh0aGlzLmZpZWxkQ29udGFpbmVyKSB7XG4vLyAgICAgICAgICAgICB0aGlzLnNlY3Rpb25DaGVja2JveGVzID0gdGhpcy5maWVsZENvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dFt0eXBlPVwiY2hlY2tib3hcIl0nKTtcbi8vICAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMuc2VjdGlvbkNoZWNrYm94ZXMpO1xuLy8gICAgICAgICAgICAgaWYgKHRoaXMuc2VjdGlvbkNoZWNrYm94ZXMpIHtcbi8vICAgICAgICAgICAgICAgICB0aGlzLnNlY3Rpb25DaGVja2JveGVzLmZvckVhY2goY2hlY2tib3ggPT4gY2hlY2tib3guYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGhpcy5oYW5kbGVTb3VyY2VzQ2hhbmdlLmJpbmQodGhpcykpKTtcbi8vICAgICAgICAgICAgIH1cbi8vICAgICAgICAgfVxuXG4vLyAgICAgICAgIHRoaXMuZW50cnlUeXBlc1NlbGVjdEFyZWEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1lbnRyeS10eXBlcy1zZWxlY3QtYXJlYV0nKTtcbi8vICAgICAgICAgdGhpcy5nZXRTZWxlY3RlZFNlY3Rpb25zID0gdGhpcy5nZXRTZWxlY3RlZFNlY3Rpb25zLmJpbmQodGhpcyk7XG4vLyAgICAgfVxuXG4vLyAgICAgZ2V0U2VsZWN0ZWRTZWN0aW9ucygpIHtcbi8vICAgICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5maWx0ZXIuY2FsbCh0aGlzLnNlY3Rpb25DaGVja2JveGVzLCBjaGVja2JveCA9PiB7XG4vLyAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGNoZWNrYm94KTtcbi8vICAgICAgICAgICAgIHJldHVybiBjaGVja2JveC5jaGVja2VkIHx8IGZhbHNlO1xuLy8gICAgICAgICB9KS5tYXAoY2hlY2tib3ggPT4ge1xuLy8gICAgICAgICAgICAgcmV0dXJuIGNoZWNrYm94LnZhbHVlO1xuLy8gICAgICAgICB9KTtcbi8vICAgICB9XG5cbi8vICAgICBnZXRTZWxlY3RlZEVudHJ5VHlwZXMoKSB7XG4vLyAgICAgICAgIGNvbnN0IGVudHJ5VHlwZXNTZWN0aW9uID0gdGhpcy5lbnRyeVR5cGVzU2VsZWN0QXJlYS5xdWVyeVNlbGVjdG9yKCdkaXYnKTtcbi8vICAgICAgICAgaWYgKGVudHJ5VHlwZXNTZWN0aW9uKSB7XG4vLyAgICAgICAgICAgICBjb25zdCBlbnRyeVR5cGVDaGVja2JveGVzID0gZW50cnlUeXBlc1NlY3Rpb24ucXVlcnlTZWxlY3RvckFsbCgnaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdJyk7XG4vLyAgICAgICAgICAgICBjb25zb2xlLmxvZyhlbnRyeVR5cGVDaGVja2JveGVzKTtcbi8vICAgICAgICAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwoZW50cnlUeXBlQ2hlY2tib3hlcywgY2hlY2tib3ggPT4ge1xuLy8gICAgICAgICAgICAgICAgIHJldHVybiBjaGVja2JveC5jaGVja2VkO1xuLy8gICAgICAgICAgICAgfSkubWFwKGNoZWNrYm94ID0+IHtcbi8vICAgICAgICAgICAgICAgICByZXR1cm4gY2hlY2tib3gudmFsdWU7XG4vLyAgICAgICAgICAgICB9KTtcbi8vICAgICAgICAgfVxuXG4vLyAgICAgICAgIHJldHVybiBudWxsO1xuLy8gICAgIH1cblxuLy8gICAgIGhhbmRsZVNvdXJjZXNDaGFuZ2UoZSkge1xuLy8gICAgICAgICBjb25zdCBzZWxlY3RlZFNlY3Rpb25zID0gdGhpcy5nZXRTZWxlY3RlZFNlY3Rpb25zKCk7XG4vLyAgICAgICAgIGNvbnN0IHNlbGVjdGVkRW50cnlUeXBlcyA9IHRoaXMuZ2V0U2VsZWN0ZWRFbnRyeVR5cGVzKCk7XG5cbi8vICAgICAgICAgaWYgKHNlbGVjdGVkU2VjdGlvbnMubGVuZ3RoIDwgMSkge1xuLy8gICAgICAgICAgICAgdGhpcy5lbnRyeVR5cGVzU2VsZWN0QXJlYS5pbm5lckhUTUwgPSAnJztcbi8vICAgICAgICAgfVxuLy8gICAgICAgICBBcGlDbGllbnQuZ2V0VGVtcGxhdGUoc2VsZWN0ZWRTZWN0aW9ucywgc2VsZWN0ZWRFbnRyeVR5cGVzKVxuLy8gICAgICAgICAgICAgLnRoZW4oZGF0YSA9PiB7XG4vLyAgICAgICAgICAgICAgICAgdGhpcy5lbnRyeVR5cGVzU2VsZWN0QXJlYS5pbm5lckhUTUwgPSBkYXRhO1xuLy8gICAgICAgICAgICAgfSk7XG4vLyAgICAgfVxuLy8gfVxuXG4vLyBjbGFzcyBBcGlDbGllbnQge1xuLy8gICAgIHN0YXRpYyBnZXRUZW1wbGF0ZShzZWN0aW9uVWlkcywgZW50cnlUeXBlcykge1xuLy8gICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuLy8gICAgICAgICAgICAgbGV0IG9wdHMgPSB7XG4vLyAgICAgICAgICAgICAgICAgY3JlZGVudGlhbHM6ICdzYW1lLW9yaWdpbicsXG4vLyAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xuLy8gICAgICAgICAgICAgICAgICAgICAnWC1SZXF1ZXN0ZWQtV2l0aCc6ICdYTUxIdHRwUmVxdWVzdCcsXG4vLyAgICAgICAgICAgICAgICAgfSxcbi8vICAgICAgICAgICAgICAgICBtZXRob2Q6ICdwb3N0Jyxcbi8vICAgICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4vLyAgICAgICAgICAgICAgICAgICAgIFwic2VjdGlvblVpZHNcIjogc2VjdGlvblVpZHMsXG4vLyAgICAgICAgICAgICAgICAgICAgIFwiZW50cnlUeXBlc1wiOiBlbnRyeVR5cGVzXG4vLyAgICAgICAgICAgICAgICAgfSlcbi8vICAgICAgICAgICAgIH07XG4vLyAgICAgICAgICAgICBjb25zb2xlLmxvZyhvcHRzKTtcbi8vICAgICAgICAgICAgIGZldGNoKCcvYWRtaW4vcmVsYXRlZC1lbnRyeS10eXBlcy90eXBlcycsIG9wdHMpXG4vLyAgICAgICAgICAgICAgICAgLnRoZW4ocmVzcCA9PiByZXNwLnRleHQoKSlcbi8vICAgICAgICAgICAgICAgICAudGhlbihkYXRhID0+IHJlc29sdmUoZGF0YSkpO1xuLy8gICAgICAgICB9KTtcbi8vICAgICB9XG4vLyB9XG5cbi8vIChmdW5jdGlvbiAoJCwgd2luZG93LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XG5cbi8vICAgICB2YXIgcGx1Z2luTmFtZSA9IFwiUmVsYXRlZEVudHJ5VHlwZXNcIixcbi8vICAgICAgICAgZGVmYXVsdHMgPSB7fTtcblxuLy8gICAgIC8vIFBsdWdpbiBjb25zdHJ1Y3RvclxuLy8gICAgIGZ1bmN0aW9uIFBsdWdpbihlbGVtZW50LCBvcHRpb25zKSB7XG4vLyAgICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG5cbi8vICAgICAgICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIGRlZmF1bHRzLCBvcHRpb25zKTtcblxuLy8gICAgICAgICB0aGlzLl9kZWZhdWx0cyA9IGRlZmF1bHRzO1xuLy8gICAgICAgICB0aGlzLl9uYW1lID0gcGx1Z2luTmFtZTtcblxuLy8gICAgICAgICB0aGlzLmluaXQoKTtcbi8vICAgICB9XG5cbi8vICAgICBQbHVnaW4ucHJvdG90eXBlID0ge1xuXG4vLyAgICAgICAgIGluaXQ6IGZ1bmN0aW9uIChpZCkge1xuLy8gICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuLy8gICAgICAgICAgICAgJChmdW5jdGlvbiAoKSB7XG5cbi8vICAgICAgICAgICAgICAgICAvKiAtLSBfdGhpcy5vcHRpb25zIGdpdmVzIHVzIGFjY2VzcyB0byB0aGUgJGpzb25WYXJzIHRoYXQgb3VyIEZpZWxkVHlwZSBwYXNzZWQgZG93biB0byB1cyAqL1xuXG4vLyAgICAgICAgICAgICB9KTtcbi8vICAgICAgICAgfVxuLy8gICAgIH07XG5cbi8vICAgICAvLyBBIHJlYWxseSBsaWdodHdlaWdodCBwbHVnaW4gd3JhcHBlciBhcm91bmQgdGhlIGNvbnN0cnVjdG9yLFxuLy8gICAgIC8vIHByZXZlbnRpbmcgYWdhaW5zdCBtdWx0aXBsZSBpbnN0YW50aWF0aW9uc1xuLy8gICAgICQuZm5bcGx1Z2luTmFtZV0gPSBmdW5jdGlvbiAob3B0aW9ucykge1xuLy8gICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbi8vICAgICAgICAgICAgIGlmICghJC5kYXRhKHRoaXMsIFwicGx1Z2luX1wiICsgcGx1Z2luTmFtZSkpIHtcbi8vICAgICAgICAgICAgICAgICAkLmRhdGEodGhpcywgXCJwbHVnaW5fXCIgKyBwbHVnaW5OYW1lLFxuLy8gICAgICAgICAgICAgICAgICAgICBuZXcgUGx1Z2luKHRoaXMsIG9wdGlvbnMpKTtcbi8vICAgICAgICAgICAgIH1cbi8vICAgICAgICAgfSk7XG4vLyAgICAgfTtcblxuLy8gfSkoalF1ZXJ5LCB3aW5kb3csIGRvY3VtZW50KTtcblxuLy8gd2luZG93LlJlbGF0ZWRFbnRyeVR5cGVzRmllbGQgPSBSZWxhdGVkRW50cnlUeXBlc0ZpZWxkOyIsImltcG9ydCBJQ2hhbm5lbCBmcm9tIFwiLi4vaW50ZXJmYWNlcy9JQ2hhbm5lbFwiO1xuaW1wb3J0IENoYW5uZWwgZnJvbSAnLi9DaGFubmVsJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWxsQ2hhbm5lbCBleHRlbmRzIENoYW5uZWwgaW1wbGVtZW50cyBJQ2hhbm5lbCB7XG4gICAgY29uc3RydWN0b3Iobm9kZTogSFRNTElucHV0RWxlbWVudCkge1xuICAgICAgICBzdXBlcihub2RlKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY2hlY2tib3hDaGFuZ2VIYW5kbGVyKGNoYW5nZUV2ZW50OiBFdmVudCk6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCB0YXJnZXQ6IEhUTUxJbnB1dEVsZW1lbnQgPSBjaGFuZ2VFdmVudC50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudDtcbiAgICAgICAgdGhpcy5hY3RpdmUgPSB0YXJnZXQuY2hlY2tlZDtcblxuICAgICAgICBjb25zdCBldmVudCA9IG5ldyBDdXN0b21FdmVudCgnY2hhbm5lbENoYW5nZScsIHtcbiAgICAgICAgICAgIGRldGFpbDoge1xuICAgICAgICAgICAgICAgIHNlY3Rpb25VaWQ6IHRoaXMudWlkLFxuICAgICAgICAgICAgICAgIGFjdGl2ZTogdGhpcy5hY3RpdmUsXG4gICAgICAgICAgICAgICAgYWxsOiB0cnVlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYnViYmxlczogdHJ1ZVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdGhpcy5jaGVja2JveC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICB9XG59IiwiaW1wb3J0IElDaGFubmVsIGZyb20gXCIuLi9pbnRlcmZhY2VzL0lDaGFubmVsXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENoYW5uZWwgaW1wbGVtZW50cyBJQ2hhbm5lbCB7XG4gICAgcHJvdGVjdGVkIGNoZWNrYm94OiBIVE1MSW5wdXRFbGVtZW50O1xuICAgIHB1YmxpYyBuYW1lOiBzdHJpbmc7XG4gICAgcHVibGljIGxhYmVsOiBzdHJpbmc7XG4gICAgcHVibGljIHVpZDogc3RyaW5nO1xuICAgIHB1YmxpYyBhY3RpdmU6IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3Rvcihub2RlOiBIVE1MSW5wdXRFbGVtZW50KSB7XG4gICAgICAgIHRoaXMuY2hlY2tib3ggPSBub2RlO1xuICAgICAgICB0aGlzLmFjdGl2ZSA9IG5vZGUuY2hlY2tlZDtcblxuICAgICAgICBjb25zdCB1aWRNYXRjaCA9IG5vZGUudmFsdWUubWF0Y2goL3NlY3Rpb25cXDooLiopLyk7XG4gICAgICAgICAgICBcbiAgICAgICAgaWYgKHVpZE1hdGNoICYmIHVpZE1hdGNoLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy51aWQgPSB1aWRNYXRjaFswXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubmFtZSA9IG5vZGUudmFsdWU7XG4gICAgICAgIGNvbnN0IGxhYmVsOiBIVE1MTGFiZWxFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgbGFiZWxbZm9yPVwiJHt0aGlzLmNoZWNrYm94LmlkfVwiXWApO1xuICAgICAgICBcbiAgICAgICAgaWYgKGxhYmVsKSB7XG4gICAgICAgICAgICB0aGlzLmxhYmVsID0gbGFiZWwuaW5uZXJUZXh0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gTWV0aG9kIGJpbmRpbmdcbiAgICAgICAgdGhpcy5jaGVja2JveENoYW5nZUhhbmRsZXIgPSB0aGlzLmNoZWNrYm94Q2hhbmdlSGFuZGxlci5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnVwZGF0ZUFjdGl2ZVN0YXR1cyA9IHRoaXMudXBkYXRlQWN0aXZlU3RhdHVzLmJpbmQodGhpcyk7XG5cbiAgICAgICAgdGhpcy5jaGVja2JveC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0aGlzLmNoZWNrYm94Q2hhbmdlSGFuZGxlcik7XG4gICAgfVxuXG4gICAgcHVibGljIHVwZGF0ZUFjdGl2ZVN0YXR1cygpIHtcbiAgICAgICAgdGhpcy5hY3RpdmUgPSB0aGlzLmNoZWNrYm94LmNoZWNrZWQ7XG4gICAgfVxuXG4gICAgcHVibGljIGNoZWNrYm94Q2hhbmdlSGFuZGxlcihjaGFuZ2VFdmVudDogRXZlbnQpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0OiBIVE1MSW5wdXRFbGVtZW50ID0gY2hhbmdlRXZlbnQudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgICAgIHRoaXMuYWN0aXZlID0gdGFyZ2V0LmNoZWNrZWQ7XG5cbiAgICAgICAgY29uc3QgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoJ2NoYW5uZWxDaGFuZ2UnLCB7XG4gICAgICAgICAgICBkZXRhaWw6IHtcbiAgICAgICAgICAgICAgICBzZWN0aW9uVWlkOiB0aGlzLnVpZCxcbiAgICAgICAgICAgICAgICBhY3RpdmU6IHRoaXMuYWN0aXZlLFxuICAgICAgICAgICAgICAgIGFsbDogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBidWJibGVzOiB0cnVlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmNoZWNrYm94LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgIH1cbn0iLCJpbXBvcnQgSUNoYW5uZWxHcm91cCBmcm9tICcuLi9pbnRlcmZhY2VzL0lDaGFubmVsR3JvdXAnO1xuaW1wb3J0IElDaGFubmVsIGZyb20gJy4uL2ludGVyZmFjZXMvSUNoYW5uZWwnO1xuaW1wb3J0IENoYW5uZWwgZnJvbSAnLi9DaGFubmVsJztcbmltcG9ydCBBbGxDaGFubmVsIGZyb20gJy4vQWxsQ2hhbm5lbCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENoYW5uZWxHcm91cCBpbXBsZW1lbnRzIElDaGFubmVsR3JvdXAge1xuICAgIHByaXZhdGUgY2hhbm5lbHM6IElDaGFubmVsW107XG4gICAgcHJpdmF0ZSBub2RlOiBIVE1MRGl2RWxlbWVudDtcblxuICAgIGNvbnN0cnVjdG9yKG5vZGU6IEhUTUxEaXZFbGVtZW50KSB7XG4gICAgICAgIHRoaXMubm9kZSA9IG5vZGU7XG4gICAgICAgIGNvbnN0IGNoZWNrYm94ZXM6IE5vZGVMaXN0T2Y8SFRNTElucHV0RWxlbWVudD4gPSBub2RlLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0W3R5cGU9XCJjaGVja2JveFwiXScpO1xuICAgICAgICB0aGlzLmNoYW5uZWxzID0gQXJyYXkuZnJvbShjaGVja2JveGVzKVxuICAgICAgICAgICAgLm1hcCgoY2hlY2tib3g6IEhUTUxJbnB1dEVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoY2hlY2tib3gudmFsdWUgPT09ICcqJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEFsbENoYW5uZWwoY2hlY2tib3gpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ2hhbm5lbChjaGVja2JveCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIC8vIE1ldGhvZCBiaW5kaW5nXG4gICAgICAgIHRoaXMuZ2V0QWN0aXZlQ2hhbm5lbHMgPSB0aGlzLmdldEFjdGl2ZUNoYW5uZWxzLmJpbmQodGhpcyk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldENoYW5uZWxzKCk6IElDaGFubmVsW10ge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFubmVscztcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0QWN0aXZlQ2hhbm5lbHMoKTogSUNoYW5uZWxbXSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYW5uZWxzLmZpbHRlcigoY2hhbm5lbDogSUNoYW5uZWwpID0+IHtcbiAgICAgICAgICAgIGNoYW5uZWwudXBkYXRlQWN0aXZlU3RhdHVzKCk7XG4gICAgICAgICAgICByZXR1cm4gY2hhbm5lbC5hY3RpdmU7XG4gICAgICAgIH0pO1xuICAgIH1cbn0iLCJpbXBvcnQgSUVudHJ5VHlwZUdyb3VwIGZyb20gJy4uL2ludGVyZmFjZXMvSUVudHJ5VHlwZUdyb3VwJztcbmltcG9ydCBJRW50cnlUeXBlIGZyb20gJy4uL2ludGVyZmFjZXMvSUVudHJ5VHlwZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVudHJ5VHlwZUdyb3VwIGltcGxlbWVudHMgSUVudHJ5VHlwZUdyb3VwIHtcbiAgICBwcml2YXRlIGVudHJ5VHlwZXM6IElFbnRyeVR5cGVbXTtcbiAgICBwcml2YXRlIG5vZGU6IEhUTUxEaXZFbGVtZW50O1xuXG4gICAgY29uc3RydWN0b3IoZW50cnlUeXBlc0dyb3VwQ29udGFpbmVyOiBIVE1MRGl2RWxlbWVudCkge1xuICAgICAgICB0aGlzLm5vZGUgPSBlbnRyeVR5cGVzR3JvdXBDb250YWluZXI7XG4gICAgfVxuXG4gICAgcHVibGljIHJlbmRlcigpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5ub2RlLmlubmVySFRNTCA9ICdIZWxsbywgd29ybGQnO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRFbnRyeVR5cGVzKGVudHJ5VHlwZXM6IElFbnRyeVR5cGVbXSk6IHZvaWQge1xuICAgICAgICB0aGlzLmVudHJ5VHlwZXMgPSBlbnRyeVR5cGVzO1xuICAgIH1cbn0iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P2VtYmVkZGVkIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vZmllbGQuc2Nzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P2VtYmVkZGVkIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vZmllbGQuc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9lbWJlZGRlZCEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL2ZpZWxkLnNjc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iXSwic291cmNlUm9vdCI6IiJ9