!function(e){function n(n){for(var s,i,c=n[0],l=n[1],a=n[2],d=0,f=[];d<c.length;d++)i=c[d],r[i]&&f.push(r[i][0]),r[i]=0;for(s in l)Object.prototype.hasOwnProperty.call(l,s)&&(e[s]=l[s]);for(u&&u(n);f.length;)f.shift()();return o.push.apply(o,a||[]),t()}function t(){for(var e,n=0;n<o.length;n++){for(var t=o[n],s=!0,c=1;c<t.length;c++){var l=t[c];0!==r[l]&&(s=!1)}s&&(o.splice(n--,1),e=i(i.s=t[0]))}return e}var s={},r={main:0},o=[];function i(n){if(s[n])return s[n].exports;var t=s[n]={i:n,l:!1,exports:{}};return e[n].call(t.exports,t,t.exports,i),t.l=!0,t.exports}i.m=e,i.c=s,i.d=function(e,n,t){i.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,n){if(1&n&&(e=i(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(i.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var s in e)i.d(t,s,function(n){return e[n]}.bind(null,s));return t},i.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(n,"a",n),n},i.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},i.p="";var c=window.webpackJsonp=window.webpackJsonp||[],l=c.push.bind(c);c.push=n,c=c.slice();for(var a=0;a<c.length;a++)n(c[a]);var u=l;o.push([0,"vendor"]),t()}({"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/index.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/lib/loader.js!./resources/scss/field.scss":
/*!********************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader!./node_modules/postcss-loader/src??embedded!./node_modules/sass-loader/lib/loader.js!./resources/scss/field.scss ***!
  \********************************************************************************************************************************************************************************************************/
/*! no static exports found */function(e,n,t){},"./resources/js/RelatedEntryTypesField.ts":
/*!************************************************!*\
  !*** ./resources/js/RelatedEntryTypesField.ts ***!
  \************************************************/
/*! exports provided: default */function(e,n,t){"use strict";t.r(n);var s=t(/*! ./components/ChannelGroup */"./resources/js/components/ChannelGroup.ts"),r=t(/*! ./components/SectionMap */"./resources/js/components/SectionMap.ts"),o=function(){function e(){var e=this;this.fieldContainer=document.querySelector("#types-unionco-relatedentrytypes-fields-RelatedEntryType-sources-field");var n=document.querySelector("[data-related-entry-types-channels]");if(n){this.channelGroup=new s.default(n);var t=JSON.parse(n.dataset.relatedEntryTypesChannels);this.sectionMap=t}this.fieldContainer.addEventListener("channelChange",function(n){console.log(n.detail);var t=n.detail.channel;console.log(t),console.log(r.default.getEntryTypesBySectionUid(e.sectionMap,t.uid))}),console.log(this)}return e.fetchTemplates=function(e,n){var t={credentials:"same-origin",headers:{"X-Requested-With":"XMLHttpRequest"},method:"post",body:JSON.stringify({sectionUids:e,entryTypes:n})};return console.log(t),fetch("/admin/related-entry-types/types",t)},e}();n.default=o,new o},"./resources/js/components/Channel.ts":
/*!********************************************!*\
  !*** ./resources/js/components/Channel.ts ***!
  \********************************************/
/*! exports provided: default */function(e,n,t){"use strict";t.r(n);var s=function(){function e(e){this.checkbox=e;var n=e.value.match(/section\:(.*)/);n&&n.length&&(this.uid=n[0]),this.name=this.checkbox.value;var t=document.querySelector('label[for="'+this.checkbox.id+'"]');t&&(this.label=t.innerText),this.checkboxChangeHandler=this.checkboxChangeHandler.bind(this),this.checkbox.addEventListener("change",this.checkboxChangeHandler)}return e.prototype.checkboxChangeHandler=function(e){var n=new CustomEvent("channelChange",{detail:{channel:{name:this.name,label:this.label,uid:this.uid}},bubbles:!0});return this.checkbox.dispatchEvent(n)},e}();n.default=s},"./resources/js/components/ChannelGroup.ts":
/*!*************************************************!*\
  !*** ./resources/js/components/ChannelGroup.ts ***!
  \*************************************************/
/*! exports provided: default */function(e,n,t){"use strict";t.r(n);var s=t(/*! ./Channel */"./resources/js/components/Channel.ts"),r=function(){function e(e){this.node=e;var n=e.querySelectorAll('input[type="checkbox"]');this.channels=Array.from(n).map(function(e){return new s.default(e)}),console.log(this)}return e.prototype.getChannels=function(){return[]},e}();n.default=r},"./resources/js/components/SectionMap.ts":
/*!***********************************************!*\
  !*** ./resources/js/components/SectionMap.ts ***!
  \***********************************************/
/*! exports provided: default */function(e,n,t){"use strict";t.r(n);var s=function(){function e(){}return e.getEntryTypesBySectionUid=function(e,n){for(var t in Object.keys(e)){var s=e[t];if(console.log(s),s){var r=s.filter(function(e){return e.sectionUid===n});if(r&&r.length)return r}}return[]},e}();n.default=s},"./resources/scss/field.scss":
/*!***********************************!*\
  !*** ./resources/scss/field.scss ***!
  \***********************************/
/*! no static exports found */function(e,n,t){var s=t(/*! !../../node_modules/mini-css-extract-plugin/dist/loader.js!../../node_modules/css-loader!../../node_modules/postcss-loader/src??embedded!../../node_modules/sass-loader/lib/loader.js!./field.scss */"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/index.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/lib/loader.js!./resources/scss/field.scss");"string"==typeof s&&(s=[[e.i,s,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};t(/*! ../../node_modules/style-loader/lib/addStyles.js */"./node_modules/style-loader/lib/addStyles.js")(s,r);s.locals&&(e.exports=s.locals)},0:
/*!**********************************************************************************!*\
  !*** multi ./resources/js/RelatedEntryTypesField.ts ./resources/scss/field.scss ***!
  \**********************************************************************************/
/*! no static exports found */function(e,n,t){t(/*! /Users/abryrath/Union/Library/relatedentrytypes/resources/js/RelatedEntryTypesField.ts */"./resources/js/RelatedEntryTypesField.ts"),e.exports=t(/*! /Users/abryrath/Union/Library/relatedentrytypes/resources/scss/field.scss */"./resources/scss/field.scss")}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,