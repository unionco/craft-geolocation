!function(e){function t(t){for(var s,i,c=t[0],a=t[1],u=t[2],d=0,h=[];d<c.length;d++)i=c[d],r[i]&&h.push(r[i][0]),r[i]=0;for(s in a)Object.prototype.hasOwnProperty.call(a,s)&&(e[s]=a[s]);for(l&&l(t);h.length;)h.shift()();return o.push.apply(o,u||[]),n()}function n(){for(var e,t=0;t<o.length;t++){for(var n=o[t],s=!0,c=1;c<n.length;c++){var a=n[c];0!==r[a]&&(s=!1)}s&&(o.splice(t--,1),e=i(i.s=n[0]))}return e}var s={},r={main:0},o=[];function i(t){if(s[t])return s[t].exports;var n=s[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=e,i.c=s,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)i.d(n,s,function(t){return e[t]}.bind(null,s));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="";var c=window.webpackJsonp=window.webpackJsonp||[],a=c.push.bind(c);c.push=t,c=c.slice();for(var u=0;u<c.length;u++)t(c[u]);var l=a;o.push([0,"vendor"]),n()}({"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/index.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/lib/loader.js!./resources/scss/field.scss":
/*!********************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader!./node_modules/postcss-loader/src??embedded!./node_modules/sass-loader/lib/loader.js!./resources/scss/field.scss ***!
  \********************************************************************************************************************************************************************************************************/
/*! no static exports found */function(e,t,n){},"./resources/js/RelatedEntryTypesField.ts":
/*!************************************************!*\
  !*** ./resources/js/RelatedEntryTypesField.ts ***!
  \************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var s=n(/*! ./components/ChannelGroup */"./resources/js/components/ChannelGroup.ts"),r=n(/*! ./components/EntryTypeGroup */"./resources/js/components/EntryTypeGroup.ts"),o=function(){function e(){var e=this;this.activeSections=[],this.fieldContainer=document.querySelector("#types-unionco-relatedentrytypes-fields-RelatedEntryType-sources-field");var t=document.querySelector("[data-related-entry-types-channels]");if(t){this.channelGroup=new s.default(t),this.activeSections=this.channelGroup.getActiveChannels();var n=JSON.parse(t.dataset.relatedEntryTypesChannels);this.sectionMap=n}var o=this.fieldContainer.querySelector("[data-entry-types-select-area]");o&&(this.entryTypeGroup=new r.default(o),this.entryTypeGroup.setEntryTypes(this.sectionMap.getEntryTypesByChannelArray(this.activeSections)),this.entryTypeGroup.render()),this.updateActiveSections=this.updateActiveSections.bind(this),this.fieldContainer.addEventListener("channelChange",function(t){var n=t.detail,s=n.all,r=n.active;console.log(n),e.updateActiveSections(s,r)}),console.log(this)}return e.prototype.updateActiveSections=function(e,t){this.activeSections=e?t?this.channelGroup.getChannels():[]:this.channelGroup.getActiveChannels(),console.log(this.activeSections)},e.fetchTemplates=function(e,t){var n={credentials:"same-origin",headers:{"X-Requested-With":"XMLHttpRequest"},method:"post",body:JSON.stringify({sectionUids:e,entryTypes:t})};return console.log(n),fetch("/admin/related-entry-types/types",n)},e}();t.default=o,new o},"./resources/js/components/AllChannel.ts":
/*!***********************************************!*\
  !*** ./resources/js/components/AllChannel.ts ***!
  \***********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var s,r=n(/*! ./Channel */"./resources/js/components/Channel.ts"),o=(s=function(e,t){return(s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}s(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=function(e){function t(t){return e.call(this,t)||this}return o(t,e),t.prototype.checkboxChangeHandler=function(e){var t=e.target;this.active=t.checked;var n=new CustomEvent("channelChange",{detail:{sectionUid:this.uid,active:this.active,all:!0},bubbles:!0});return this.checkbox.dispatchEvent(n)},t}(r.default);t.default=i},"./resources/js/components/Channel.ts":
/*!********************************************!*\
  !*** ./resources/js/components/Channel.ts ***!
  \********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var s=function(){function e(e){this.checkbox=e,this.active=e.checked;var t=e.value.match(/section\:(.*)/);t&&t.length&&(this.uid=t[0]),this.name=e.value;var n=document.querySelector('label[for="'+this.checkbox.id+'"]');n&&(this.label=n.innerText),this.checkboxChangeHandler=this.checkboxChangeHandler.bind(this),this.updateActiveStatus=this.updateActiveStatus.bind(this),this.checkbox.addEventListener("change",this.checkboxChangeHandler)}return e.prototype.updateActiveStatus=function(){this.active=this.checkbox.checked},e.prototype.checkboxChangeHandler=function(e){var t=e.target;this.active=t.checked;var n=new CustomEvent("channelChange",{detail:{sectionUid:this.uid,active:this.active,all:!1},bubbles:!0});return this.checkbox.dispatchEvent(n)},e}();t.default=s},"./resources/js/components/ChannelGroup.ts":
/*!*************************************************!*\
  !*** ./resources/js/components/ChannelGroup.ts ***!
  \*************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var s=n(/*! ./Channel */"./resources/js/components/Channel.ts"),r=n(/*! ./AllChannel */"./resources/js/components/AllChannel.ts"),o=function(){function e(e){this.node=e;var t=e.querySelectorAll('input[type="checkbox"]');this.channels=Array.from(t).map(function(e){return"*"===e.value?new r.default(e):new s.default(e)}),this.getActiveChannels=this.getActiveChannels.bind(this)}return e.prototype.getChannels=function(){return this.channels},e.prototype.getActiveChannels=function(){return this.channels.filter(function(e){return e.updateActiveStatus(),e.active})},e}();t.default=o},"./resources/js/components/EntryTypeGroup.ts":
/*!***************************************************!*\
  !*** ./resources/js/components/EntryTypeGroup.ts ***!
  \***************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var s=function(){function e(e){this.node=e}return e.prototype.render=function(){var e=this.entryTypes.map(function(e){return e.toHtml()});this.node.innerHTML="<ul>\n            "+e+"\n        </ul>"},e.prototype.setEntryTypes=function(e){this.entryTypes=e},e}();t.default=s},"./resources/scss/field.scss":
/*!***********************************!*\
  !*** ./resources/scss/field.scss ***!
  \***********************************/
/*! no static exports found */function(e,t,n){var s=n(/*! !../../node_modules/mini-css-extract-plugin/dist/loader.js!../../node_modules/css-loader!../../node_modules/postcss-loader/src??embedded!../../node_modules/sass-loader/lib/loader.js!./field.scss */"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/index.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/lib/loader.js!./resources/scss/field.scss");"string"==typeof s&&(s=[[e.i,s,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(/*! ../../node_modules/style-loader/lib/addStyles.js */"./node_modules/style-loader/lib/addStyles.js")(s,r);s.locals&&(e.exports=s.locals)},0:
/*!**********************************************************************************!*\
  !*** multi ./resources/js/RelatedEntryTypesField.ts ./resources/scss/field.scss ***!
  \**********************************************************************************/
/*! no static exports found */function(e,t,n){n(/*! /Users/abryrath/Union/Library/relatedentrytypes/resources/js/RelatedEntryTypesField.ts */"./resources/js/RelatedEntryTypesField.ts"),e.exports=n(/*! /Users/abryrath/Union/Library/relatedentrytypes/resources/scss/field.scss */"./resources/scss/field.scss")}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,