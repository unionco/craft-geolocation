!function(e){function n(n){for(var s,i,l=n[0],c=n[1],a=n[2],d=0,h=[];d<l.length;d++)i=l[d],r[i]&&h.push(r[i][0]),r[i]=0;for(s in c)Object.prototype.hasOwnProperty.call(c,s)&&(e[s]=c[s]);for(u&&u(n);h.length;)h.shift()();return o.push.apply(o,a||[]),t()}function t(){for(var e,n=0;n<o.length;n++){for(var t=o[n],s=!0,l=1;l<t.length;l++){var c=t[l];0!==r[c]&&(s=!1)}s&&(o.splice(n--,1),e=i(i.s=t[0]))}return e}var s={},r={main:0},o=[];function i(n){if(s[n])return s[n].exports;var t=s[n]={i:n,l:!1,exports:{}};return e[n].call(t.exports,t,t.exports,i),t.l=!0,t.exports}i.m=e,i.c=s,i.d=function(e,n,t){i.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,n){if(1&n&&(e=i(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(i.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var s in e)i.d(t,s,function(n){return e[n]}.bind(null,s));return t},i.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(n,"a",n),n},i.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},i.p="";var l=window.webpackJsonp=window.webpackJsonp||[],c=l.push.bind(l);l.push=n,l=l.slice();for(var a=0;a<l.length;a++)n(l[a]);var u=c;o.push([0,"vendor"]),t()}({"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/index.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/lib/loader.js!./resources/scss/field.scss":
/*!********************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader!./node_modules/postcss-loader/src??embedded!./node_modules/sass-loader/lib/loader.js!./resources/scss/field.scss ***!
  \********************************************************************************************************************************************************************************************************/
/*! no static exports found */function(e,n,t){},"./resources/js/RelatedEntryTypesField.ts":
/*!************************************************!*\
  !*** ./resources/js/RelatedEntryTypesField.ts ***!
  \************************************************/
/*! exports provided: default */function(e,n,t){"use strict";t.r(n);var s=t(/*! ./components/ChannelGroup */"./resources/js/components/ChannelGroup.ts"),r=function(){function e(){this.fieldContainer=document.querySelector("#types-unionco-relatedentrytypes-fields-RelatedEntryType-sources-field");var e=document.querySelector("[data-related-entry-types-channels]");if(e){this.channelGroup=new s.default(e);var n=JSON.parse(e.dataset.relatedEntryTypesChannels);this.sectionMap=n}this.fieldContainer.addEventListener("channelChange",function(e){console.log(e.detail)}),console.log(this)}return e.fetchTemplates=function(e,n){var t={credentials:"same-origin",headers:{"X-Requested-With":"XMLHttpRequest"},method:"post",body:JSON.stringify({sectionUids:e,entryTypes:n})};return console.log(t),fetch("/admin/related-entry-types/types",t)},e}();n.default=r,new r},"./resources/js/components/Channel.ts":
/*!********************************************!*\
  !*** ./resources/js/components/Channel.ts ***!
  \********************************************/
/*! exports provided: default */function(e,n,t){"use strict";t.r(n);var s=function(){function e(e){this.checkbox=e,this.uid=e.value.match(/section:(.*)/)[0],this.name=this.checkbox.value;var n=document.querySelector('label[for="'+this.checkbox.id+'"]');console.log(n),n&&(this.label=n.innerText),console.log(this),this.checkboxChangeHandler=this.checkboxChangeHandler.bind(this),this.checkbox.addEventListener("change",this.checkboxChangeHandler)}return e.prototype.checkboxChangeHandler=function(e){var n=new CustomEvent("channelChange",{detail:{channel:{name:this.name,label:this.label,uid:this.uid}},bubbles:!0});return this.checkbox.dispatchEvent(n)},e}();n.default=s},"./resources/js/components/ChannelGroup.ts":
/*!*************************************************!*\
  !*** ./resources/js/components/ChannelGroup.ts ***!
  \*************************************************/
/*! exports provided: default */function(e,n,t){"use strict";t.r(n);var s=t(/*! ./Channel */"./resources/js/components/Channel.ts"),r=function(){function e(e){this.node=e;var n=e.querySelectorAll('input[type="checkbox"]');this.channels=Array.from(n).map(function(e){return new s.default(e)}),console.log(this)}return e.prototype.getChannels=function(){return[]},e}();n.default=r},"./resources/scss/field.scss":
/*!***********************************!*\
  !*** ./resources/scss/field.scss ***!
  \***********************************/
/*! no static exports found */function(e,n,t){var s=t(/*! !../../node_modules/mini-css-extract-plugin/dist/loader.js!../../node_modules/css-loader!../../node_modules/postcss-loader/src??embedded!../../node_modules/sass-loader/lib/loader.js!./field.scss */"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/index.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/lib/loader.js!./resources/scss/field.scss");"string"==typeof s&&(s=[[e.i,s,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};t(/*! ../../node_modules/style-loader/lib/addStyles.js */"./node_modules/style-loader/lib/addStyles.js")(s,r);s.locals&&(e.exports=s.locals)},0:
/*!**********************************************************************************!*\
  !*** multi ./resources/js/RelatedEntryTypesField.ts ./resources/scss/field.scss ***!
  \**********************************************************************************/
/*! no static exports found */function(e,n,t){t(/*! /Users/abryrath/Union/Library/relatedentrytypes/resources/js/RelatedEntryTypesField.ts */"./resources/js/RelatedEntryTypesField.ts"),e.exports=t(/*! /Users/abryrath/Union/Library/relatedentrytypes/resources/scss/field.scss */"./resources/scss/field.scss")}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,